var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/EnvMachineIDProvider.html",[0,0.087,1,0.987]],["body/classes/EnvMachineIDProvider.html",[0,0.105,1,1.505,2,1.191,3,0.76,4,0.888,5,0.643,6,1.191,7,0.76,8,2.313,9,0.961,10,1.002,11,0.682,12,1.303,13,1.303,14,0.961,15,2.001,16,2.008,17,2.008,18,1.053,19,0.438,20,1.123,21,1.581,22,2.201,23,2.385,24,1.303,25,2.385,26,1.031,27,2.008,28,0.806,29,1.548,30,4.112,31,1.031,32,0.058,33,1.191,34,0.504,35,0.888,36,1.141,37,2.385,38,1.191,39,0.813,40,3.254,41,3.254,42,0.76,43,0.961,44,2.008,45,2.008,46,1.231,47,0.643,48,0.643,49,0.76,50,0.438,51,1.191,52,0.678,53,1.589,54,1.375,55,1.191,56,1.589,57,0.888,58,1.375,59,1.031,60,1.589,61,2.008,62,1.123,63,1.589,64,1.589,65,2.008,66,0.961,67,2.008,68,1.589,69,0.888,70,0.643,71,1.589,72,0.961,73,1.589,74,0.76,75,1.589,76,0.043,77,0.043]],["title/classes/HybridID.html",[0,0.087,78,1.139]],["body/classes/HybridID.html",[0,0.055,2,0.623,3,0.398,4,0.465,5,0.337,7,1.096,11,0.703,19,0.229,24,0.827,26,0.539,28,0.898,29,1.596,31,1.487,32,0.058,33,1.718,34,0.5,35,1.281,39,0.8,42,1.225,43,0.609,46,0.465,50,0.351,62,1.311,66,0.741,69,0.866,70,0.974,76,0.027,77,0.027,78,2.269,79,1.36,80,4.043,81,2.609,82,2.609,83,2.084,84,2.609,85,2.609,86,3.173,87,2.609,88,2.609,89,2.609,90,2.609,91,2.609,92,2.609,93,3.173,94,3.557,95,2.841,96,3.557,97,2.37,98,3.557,99,3.557,100,3.557,101,1.702,102,1.702,103,4.548,104,2.481,105,1.921,106,1.702,107,1.702,108,1.702,109,3.557,110,0.966,111,3.173,112,2.609,113,1.702,114,3.082,115,2.596,116,2.609,117,1.702,118,1.466,119,2.609,120,1.702,121,3.082,122,2.609,123,1.702,124,4.346,125,3.173,126,1.702,127,0.719,128,2.609,129,1.702,130,2.296,131,1.976,132,3.557,133,4.047,134,4.047,135,1.883,136,1.883,137,1.883,138,2.528,139,2.609,140,1.702,141,2.841,142,2.609,143,1.702,144,3.557,145,1.702,146,1.702,147,1.549,148,1.482,149,1.34,150,1.702,151,1.702,152,1.702,153,1.702,154,1.702,155,1.702,156,3.695,157,1.702,158,2.292,159,1.702,160,1.702,161,1.702,162,1.702,163,1.702,164,1.702,165,1.134,166,1.134,167,1.134,168,1.702,169,0.719,170,1.134,171,1.134,172,0.719,173,1.134,174,1.134,175,0.966,176,2.466,177,1.702,178,1.702,179,1.702,180,1.702,181,1.8,182,1.8,183,1.8,184,1.702,185,1.8,186,2.534,187,1.36,188,3.173,189,1.702,190,1.36,191,1.702,192,1.36,193,1.702,194,1.702,195,1.702,196,1.702,197,3.557,198,2.609]],["title/classes/HybridIDGenerator.html",[0,0.087,199,1.139]],["body/classes/HybridIDGenerator.html",[0,0.032,2,0.366,3,0.516,4,0.463,5,0.198,7,0.74,9,0.74,10,0.933,11,0.728,12,0.317,13,0.7,14,0.516,18,0.234,19,0.135,20,0.71,21,1.626,24,0.537,26,0.7,28,0.822,29,1.486,31,1.172,32,0.058,33,1.355,34,0.527,35,1.103,36,1.239,38,1.512,39,0.667,42,1.04,43,0.608,46,0.603,47,0.732,48,0.198,49,0.234,50,0.592,52,0.28,55,0.366,57,0.795,59,0.317,62,1.127,66,0.788,69,0.273,70,0.626,72,0.864,74,0.396,76,0.018,77,0.018,78,2.106,83,1.355,95,1.355,104,1.87,105,2.079,115,1.925,118,1.394,127,0.717,130,2.014,131,1.648,135,2.028,136,1.5,137,1.807,138,1.253,141,1.355,147,0.828,148,1.738,149,1.338,158,0.828,169,0.423,172,0.423,175,0.567,176,2.343,181,0.962,182,1.476,183,1.915,185,0.567,199,0.717,200,0.567,201,1.13,202,1.472,203,1.476,204,1.476,205,1.653,206,1.476,207,1.476,208,0.953,209,1.476,210,1.807,211,2.376,212,1.476,213,1.271,214,1.696,215,1.734,216,1.696,217,2.209,218,1.696,219,1.696,220,1.696,221,1.973,222,0.962,223,1.231,224,1.696,225,1.472,226,2.502,227,1.648,228,0.962,229,1.796,230,1.13,231,2.148,232,2.249,233,0.962,234,1.13,235,2.038,236,1.653,237,1.13,238,1.13,239,1.796,240,1.653,241,1.079,242,1,243,2.366,244,2.466,245,2.174,246,1.472,247,1.253,248,1,249,2.693,250,1.915,251,1,252,1.734,253,1.796,254,2.112,255,1.546,256,1.5,257,1.13,258,1.13,259,1.476,260,1,261,1.079,262,1.648,263,1,264,2.173,265,1.271,266,1,267,2.387,268,1,269,1.546,270,1,271,1,272,1.807,273,1,274,1.13,275,0.962,276,1,277,1,278,1.338,279,0.933,280,0.933,281,1.13,282,1,283,1.734,284,1,285,1,286,1,287,2.293,288,1.476,289,0.799,290,1.696,291,1,292,1.765,293,1.696,294,1,295,1.696,296,1.696,297,2.079,298,1,299,1,300,1.696,301,1.696,302,1,303,1,304,1,305,1,306,1,307,1,308,1,309,1.13,310,1,311,1.796,312,2.11,313,1.13,314,1.915,315,1.253,316,1.13,317,1.13,318,1.253,319,2.627,320,1.796,321,1.734,322,1.099,323,2.249,324,1.941,325,1.13,326,1,327,1.13,328,1.476,329,1.13,330,0.962,331,1.13,332,1.13,333,1,334,1.696,335,1,336,1,337,1,338,1,339,0.962,340,1.355,341,1,342,0.799,343,1,344,0.799,345,1,346,1,347,0.799,348,1,349,1,350,1,351,1,352,1,353,1,354,1,355,0.799,356,1,357,0.666,358,0.666,359,1,360,1,361,1.696,362,1,363,1,364,1,365,1,366,1.472,367,0.717,368,1.13,369,1,370,1.13,371,1,372,0.962,373,1.13,374,2.627,375,1.13,376,1.472,377,1.472,378,1,379,1,380,1,381,0.799,382,1,383,1,384,1.355,385,0.666,386,0.488,387,0.488,388,0.488,389,0.666,390,0.666,391,1.476,392,0.666,393,0.666,394,0.962,395,0.666,396,0.666,397,0.567,398,0.666,399,0.567,400,0.666,401,0.666,402,0.666,403,0.666,404,0.567,405,0.666,406,1.734,407,0.666,408,1.941,409,0.666,410,1.941,411,0.666,412,0.666,413,0.666,414,1.472,415,0.666,416,0.666,417,0.666,418,1.734,419,0.666,420,1.13,421,0.666,422,0.567,423,0.666,424,0.666,425,0.666,426,1.472,427,1.13,428,0.666,429,0.666,430,0.666,431,1.734,432,1.13,433,0.666,434,0.666,435,0.666,436,0.666,437,0.666,438,0.567,439,1.476,440,0.828,441,1.13,442,0.666,443,0.828,444,0.666,445,0.666,446,0.666,447,0.666,448,0.666,449,1.13,450,1.13,451,0.666,452,0.567,453,0.666,454,1.13,455,1.13,456,1.13,457,1.734,458,0.717,459,1.13,460,0.666,461,0.666,462,1.13,463,0.567,464,0.666,465,0.666,466,0.666,467,0.666,468,0.567,469,0.666]],["title/interfaces/HybridIDGeneratorOptions.html",[52,0.445,223,1.139]],["body/interfaces/HybridIDGeneratorOptions.html",[0,0.046,3,0.332,4,0.388,5,0.281,9,0.529,10,0.913,11,0.724,12,0.45,13,0.45,14,0.332,18,0.332,19,0.191,20,0.771,21,1.59,26,0.45,28,0.813,32,0.058,34,0.527,35,1.321,36,1.241,38,1.543,39,0.448,42,0.877,43,0.753,46,0.771,47,0.833,48,0.559,49,0.66,50,0.594,52,0.374,57,0.771,59,0.45,62,1.244,66,0.92,69,0.388,70,0.559,72,0.955,74,0.529,76,0.024,77,0.024,78,2.044,104,1.574,105,2.071,115,1.574,118,1.335,130,1.998,131,0.694,135,2.093,136,1.488,137,1.926,138,0.806,147,0.694,148,1.744,149,1.194,158,0.694,169,0.6,172,0.6,175,0.806,176,2.586,181,1.285,182,1.603,183,1.998,185,0.806,199,0.6,200,0.806,201,0.947,202,1.509,203,1.998,204,1.998,205,1.285,206,1.998,207,1.998,208,0.52,209,0.806,210,1.996,211,2.192,212,1.998,213,1.719,215,0.947,221,1.574,222,0.806,223,1.362,225,0.947,226,2.363,227,1.106,228,0.806,229,1.603,230,0.947,231,1.996,232,1.882,233,0.806,234,0.947,235,1.974,236,1.603,237,0.947,238,0.947,239,1.603,240,1.603,241,0.694,243,2.148,244,2.148,245,2.057,246,0.947,247,1.285,249,2.5,250,1.829,252,1.509,253,1.285,254,2.071,255,1.574,256,1.362,257,0.947,258,0.947,259,1.285,261,0.694,262,1.106,264,2.234,265,1.379,267,2.234,269,1.106,272,1.719,274,0.947,275,0.806,278,1.194,279,0.957,280,0.957,281,0.947,283,1.882,287,1.829,288,0.806,309,0.947,311,1.603,312,1.882,313,0.947,314,1.603,315,1.285,316,0.947,317,0.947,318,0.806,319,2.148,320,1.285,321,1.882,322,1.194,323,1.882,324,1.509,325,0.947,327,0.947,328,1.603,329,0.947,330,0.806,331,0.947,332,0.947,339,0.806,366,1.509,367,0.6,368,0.947,370,0.947,372,0.806,373,0.947,374,2.5,375,0.947,376,0.947,377,0.947,386,0.694,387,0.694,388,0.694,389,0.947,390,0.947,391,1.829,392,0.947,393,0.947,394,1.285,395,0.947,396,0.947,397,0.806,398,0.947,399,0.806,400,0.947,401,0.947,402,0.947,403,0.947,404,0.806,405,0.947,406,2.148,407,0.947,408,2.346,409,0.947,410,2.346,411,0.947,412,0.947,413,0.947,414,1.882,415,0.947,416,0.947,417,0.947,418,2.148,419,0.947,420,1.509,421,0.947,422,0.806,423,0.947,424,0.947,425,0.947,426,1.882,427,1.509,428,0.947,429,0.947,430,0.947,431,2.148,432,1.509,433,0.947,434,0.947,435,0.947,436,0.947,437,0.947,438,0.806,439,1.829,440,1.106,441,1.509,442,0.947,443,1.106,444,0.947,445,0.947,446,0.947,447,0.947,448,0.947,449,1.509,450,1.509,451,0.947,452,0.806,453,0.947,454,1.509,455,1.509,456,1.509,457,2.148,458,0.957,459,1.509,460,0.947,461,0.947,462,1.509,463,0.806,464,0.947,465,0.947,466,0.947,467,0.947,468,0.806,469,0.947,470,0.694]],["title/interfaces/HybridIDInfo.html",[52,0.445,322,1.139]],["body/interfaces/HybridIDInfo.html",[0,0.048,3,0.343,4,0.401,5,0.291,9,0.544,10,0.92,11,0.725,12,0.466,13,0.466,14,0.343,18,0.343,19,0.198,20,0.789,21,1.598,26,0.466,28,0.808,32,0.058,34,0.515,35,0.401,36,1.239,38,1.56,39,0.46,42,0.89,43,0.767,46,0.789,47,0.753,48,0.291,49,0.343,50,0.573,52,0.384,57,0.789,59,0.466,62,1.255,66,0.932,69,0.401,70,0.571,72,0.966,74,0.544,76,0.024,77,0.024,78,2.057,104,1.604,105,2.082,115,1.604,118,1.35,130,2.031,131,0.718,135,2.057,136,1.513,137,1.942,138,0.834,147,0.718,148,1.756,149,1.221,158,0.718,169,0.621,172,0.621,175,0.834,176,2.607,181,1.32,182,1.639,183,2.031,185,0.834,199,0.621,200,0.834,201,0.979,202,1.551,203,1.32,204,1.32,205,1.32,206,1.32,207,1.32,208,0.538,209,0.834,210,2.02,211,2.298,212,1.32,213,1.136,215,0.979,221,1.604,222,0.834,223,1.221,225,0.979,226,2.377,227,1.136,228,0.834,229,1.639,230,0.979,231,2.02,232,1.925,233,0.834,234,0.979,235,1.989,236,1.639,237,0.979,238,0.979,239,1.639,240,1.639,241,0.718,243,2.189,244,2.189,245,2.08,246,0.979,247,1.32,249,2.537,250,1.864,252,1.551,253,1.32,254,2.113,255,1.604,256,1.388,257,0.979,258,0.979,259,1.32,261,0.718,262,1.136,264,2.263,265,1.411,267,2.476,269,1.136,272,1.748,274,0.979,275,0.834,278,1.221,279,0.983,280,0.983,281,0.979,283,1.925,287,1.864,288,0.834,309,0.979,311,1.639,312,1.925,313,0.979,314,1.639,315,1.32,316,0.979,317,0.979,318,0.834,319,2.189,320,1.32,321,1.925,322,1.388,323,1.925,324,1.551,325,0.979,327,0.979,328,1.639,329,0.979,330,0.834,331,0.979,332,0.979,339,0.834,366,1.551,367,0.621,368,0.979,370,0.979,372,0.834,373,0.979,374,2.537,375,0.979,376,0.979,377,0.979,386,0.718,387,0.718,388,0.718,389,0.979,390,0.979,391,1.864,392,0.979,393,0.979,394,1.32,395,0.979,396,0.979,397,0.834,398,0.979,399,0.834,400,0.979,401,0.979,402,0.979,403,0.979,404,0.834,405,0.979,406,2.189,407,0.979,408,2.386,409,0.979,410,2.386,411,0.979,412,0.979,413,0.979,414,1.925,415,0.979,416,0.979,417,0.979,418,2.189,419,0.979,420,1.551,421,0.979,422,0.834,423,0.979,424,0.979,425,0.979,426,1.925,427,1.551,428,0.979,429,0.979,430,0.979,431,2.189,432,1.551,433,0.979,434,0.979,435,0.979,436,0.979,437,0.979,438,0.834,439,1.864,440,1.136,441,1.551,442,0.979,443,1.136,444,0.979,445,0.979,446,0.979,447,0.979,448,0.979,449,1.551,450,1.551,451,0.979,452,0.834,453,0.979,454,1.551,455,1.551,456,1.551,457,2.189,458,0.983,459,1.551,460,0.979,461,0.979,462,1.551,463,0.834,464,0.979,465,0.979,466,0.979,467,0.979,468,0.834,469,0.979,470,0.718]],["title/interfaces/MachineIDProvider.html",[18,0.63,52,0.445]],["body/interfaces/MachineIDProvider.html",[0,0.111,1,1.255,3,0.8,4,0.936,5,0.678,6,1.255,7,0.8,8,2.074,9,0.8,10,1.013,11,0.69,12,1.086,13,1.086,14,0.8,15,1.95,16,1.673,17,1.673,18,1.078,19,0.461,21,1.346,22,1.673,23,2.074,24,1.346,25,2.422,27,1.673,28,0.701,29,1.346,32,0.058,34,0.365,36,1.127,37,2.254,39,0.678,42,0.8,43,0.992,44,2.074,45,2.074,46,1.26,47,0.678,48,0.678,49,0.8,50,0.461,51,1.255,52,0.761,53,2.074,54,1.795,55,1.555,56,2.074,57,1.16,58,1.795,59,1.086,60,1.673,61,2.074,62,1.16,63,1.673,64,1.673,65,2.074,66,0.992,67,2.074,68,1.673,69,0.936,70,0.678,71,1.673,72,0.992,73,1.673,74,0.8,75,1.673,76,0.045,77,0.045,470,1.673,471,3.427]],["title/classes/MachineIDProviderFactory.html",[0,0.087,472,1.797]],["body/classes/MachineIDProviderFactory.html",[0,0.106,1,1.196,2,1.196,3,0.763,4,0.892,5,0.646,6,1.196,7,0.763,8,2.013,9,1.108,10,0.967,11,0.658,12,1.035,13,1.035,14,0.763,15,1.908,16,1.595,17,1.595,18,1.142,19,0.44,21,1.306,22,1.595,23,2.205,24,1.306,25,2.013,27,1.595,28,0.782,29,1.306,31,1.035,32,0.058,33,1.196,34,0.439,35,0.892,36,1.142,37,2.205,39,0.893,42,0.763,43,0.963,44,2.013,45,2.013,46,1.233,47,0.893,48,0.815,49,0.963,50,0.555,51,1.196,52,0.68,53,1.595,54,1.38,55,1.196,56,1.595,57,0.892,58,1.38,59,1.035,60,1.595,61,2.013,62,1.125,63,1.595,64,1.595,65,2.013,66,0.963,67,2.013,68,1.595,69,0.892,70,0.646,71,1.595,72,0.963,73,1.595,74,0.763,75,1.595,76,0.043,77,0.043,80,3.293,110,1.853,208,1.196,265,2.476,472,2.176,473,3.266,474,3.266,475,4.122,476,3.266,477,3.266,478,2.609,479,4.743,480,3.266,481,4.122,482,3.266,483,3.266,484,3.266,485,2.609]],["title/classes/NetworkMachineIDProvider.html",[0,0.087,486,1.797]],["body/classes/NetworkMachineIDProvider.html",[0,0.097,1,1.095,2,1.095,3,0.699,4,0.817,5,0.592,6,1.095,7,0.91,8,1.903,9,1.012,10,0.983,11,0.669,12,1.373,13,0.948,14,0.699,15,1.831,16,1.903,17,1.903,18,1.012,19,0.403,20,1.064,21,1.628,22,2.116,23,1.903,24,1.235,25,2.324,26,0.948,27,1.461,28,0.831,29,1.575,31,1.373,32,0.058,33,1.681,34,0.52,35,1.332,36,1.14,37,2.324,38,1.095,39,0.771,42,1.012,43,0.91,44,1.903,45,1.903,46,1.183,47,0.592,48,0.592,49,1.072,50,0.403,51,1.427,52,0.757,53,1.461,54,1.264,55,1.095,56,1.461,57,0.817,58,1.264,59,0.948,60,1.461,61,1.903,62,1.064,63,1.461,64,1.461,65,1.903,66,0.91,67,1.903,68,1.461,69,0.817,70,0.592,71,1.461,72,0.91,73,1.461,74,0.699,75,1.461,76,0.041,77,0.041,127,1.264,148,1.427,221,1.461,241,1.461,256,1.646,278,1.264,315,2.211,485,2.39,486,1.994,487,4.76,488,4.334,489,2.992,490,2.992,491,2.992,492,2.39,493,4.334,494,3.897,495,3.897,496,2.992,497,3.897,498,3.113,499,3.897,500,2.992,501,2.992,502,2.992,503,3.897,504,2.992,505,2.992,506,2.992,507,2.992]],["title/classes/RandomMachineIDProvider.html",[0,0.087,508,1.797]],["body/classes/RandomMachineIDProvider.html",[0,0.102,1,1.152,2,1.152,3,0.735,4,0.859,5,0.622,6,1.152,7,0.94,8,1.965,9,0.735,10,1.007,11,0.685,12,1.275,13,0.996,14,0.94,15,1.875,16,1.536,17,1.965,18,1.037,19,0.423,20,1.099,21,1.613,22,1.536,23,1.965,24,1.275,25,2.361,26,0.996,27,1.536,28,0.664,29,1.567,31,1.275,32,0.058,33,1.473,34,0.498,35,1.099,36,1.219,37,2.167,39,0.796,42,1.037,43,0.94,44,1.965,45,1.965,46,1.212,47,0.622,48,0.622,49,0.735,50,0.63,51,1.152,52,0.664,53,1.536,54,1.329,55,1.152,56,1.536,57,0.859,58,1.329,59,0.996,60,1.536,61,1.965,62,1.099,63,1.536,64,1.536,65,1.965,66,0.94,67,1.965,68,1.536,69,0.859,70,0.622,71,1.536,72,0.94,73,1.536,74,0.735,75,1.536,76,0.042,77,0.042,127,1.329,208,1.625,269,1.536,279,1.329,372,1.784,458,1.329,508,2.096,509,2.512,510,2.512,511,3.145,512,3.145,513,2.512,514,3.145,515,3.145,516,4.438,517,4.024,518,3.145,519,4.024,520,3.145,521,3.145,522,3.145,523,3.145,524,3.145,525,3.145,526,3.145]],["title/changelog.html",[527,1.816,528,1.816,529,1.816]],["body/changelog.html",[3,1.083,5,0.783,11,0.624,32,0.053,74,1.148,76,0.049,77,0.049,254,1.674,275,2.247,287,2.247,367,1.674,529,3.165,530,3.962,531,3.962,532,3.962,533,3.962,534,3.165,535,3.165,536,3.962,537,3.962,538,3.165,539,4.914,540,4.914,541,3.962,542,3.962,543,3.165,544,3.962,545,3.962,546,3.962,547,3.962,548,3.962,549,3.165,550,3.962,551,3.962,552,3.962,553,3.962,554,3.962,555,3.962,556,3.962]],["title/coverage.html",[557,2.905]],["body/coverage.html",[0,0.164,1,1.269,5,0.686,6,1.822,15,1.961,18,0.81,32,0.057,34,0.369,52,0.765,70,0.686,76,0.045,77,0.045,78,1.465,79,2.77,97,2.31,165,2.31,166,2.31,167,2.31,169,1.465,170,2.31,171,2.31,172,1.465,173,2.31,174,2.31,199,1.465,200,2.633,223,1.465,272,2.089,322,1.465,386,1.693,387,1.693,388,1.693,472,2.31,486,2.31,508,2.31,557,2.77,558,2.77,559,2.31,560,3.467,561,3.467,562,3.467,563,3.467,564,3.467,565,3.467,566,3.467,567,3.467,568,3.467,569,5.352,570,3.467,571,3.467,572,3.467,573,2.77,574,3.467,575,3.467,576,3.467,577,3.707,578,5.335,579,4.205,580,5.264,581,3.467,582,3.467]],["title/miscellaneous/functions.html",[280,1.365,583,0.96]],["body/miscellaneous/functions.html",[7,1.194,9,0.891,10,0.932,11,0.634,14,0.891,19,0.39,28,0.892,29,0.918,31,1.619,32,0.056,33,1.871,34,0.502,35,1.395,36,1.203,39,0.573,42,1.13,47,0.573,48,0.573,50,0.651,51,1.061,57,0.791,58,1.224,72,0.891,76,0.04,77,0.04,97,2.542,105,2.203,110,1.643,114,3.021,115,2.532,118,1.436,121,3.021,127,1.224,135,1.612,136,1.224,137,1.224,147,1.414,148,1.061,149,1.224,156,2.314,158,1.414,169,1.612,170,2.542,171,2.542,172,1.612,173,2.542,174,2.542,187,2.314,190,2.314,192,2.314,208,1.397,210,1.414,213,1.863,231,1.863,235,1.802,245,1.414,254,1.802,255,1.414,256,1.224,265,2.083,269,1.414,278,1.612,279,1.915,280,1.224,328,2.873,367,1.224,386,1.863,387,1.863,388,1.863,404,1.643,422,1.643,440,2.083,443,1.414,458,1.224,463,1.643,498,2.314,509,2.314,573,2.314,579,2.314,583,1.224,584,5.111,585,4.266,586,2.897,587,4.266,588,4.266,589,2.897,590,2.897,591,2.897,592,2.314,593,3.815,594,2.897,595,2.897,596,2.897,597,2.897,598,2.897,599,2.897,600,2.897,601,2.897,602,2.897]],["title/index.html",[19,0.306,527,1.816,528,1.816]],["body/index.html",[0,0.073,7,0.748,9,0.872,10,0.911,11,0.727,14,0.748,20,0.613,24,0.711,26,0.711,28,0.37,31,0.711,32,0.056,34,0.341,36,1.214,38,0.822,43,0.872,47,0.444,48,0.444,49,0.524,50,0.634,54,0.948,55,0.822,66,1.1,70,0.911,72,0.872,74,0.951,76,0.034,77,0.034,104,1.096,105,1.353,118,1.014,127,0.948,131,1.096,135,1.72,136,0.948,137,1.577,148,1.367,149,0.948,186,1.793,199,2.079,203,1.273,204,1.273,205,1.273,206,1.273,207,1.273,208,0.822,209,1.273,210,2.102,211,2.249,212,2.118,213,1.564,221,2.249,222,1.273,223,1.577,226,2.447,227,2.34,228,1.273,229,1.273,231,2.185,233,1.273,235,1.99,236,1.273,239,2.118,240,1.817,241,1.823,245,2.102,247,2.118,250,1.273,253,2.442,254,1.946,255,1.564,259,1.273,261,2.299,262,1.988,264,2.309,267,1.817,278,1.72,279,0.948,280,0.948,288,1.817,289,1.793,292,1.793,297,2.982,311,1.273,314,1.273,318,2.118,320,1.273,322,0.948,330,1.273,339,1.817,340,1.793,342,1.793,344,1.793,347,1.793,355,1.793,357,2.134,358,1.495,367,1.577,381,1.793,384,1.793,391,2.309,394,1.273,397,1.273,399,1.273,438,1.273,439,2.118,440,1.096,452,1.273,458,0.948,468,1.273,470,1.096,478,1.793,492,1.793,510,1.793,513,1.793,543,1.793,549,1.793,558,1.793,559,2.134,592,1.793,603,2.244,604,2.244,605,2.244,606,3.202,607,2.244,608,3.252,609,3.202,610,2.244,611,2.244,612,2.244,613,2.244,614,2.244,615,2.244,616,2.244,617,3.202,618,2.244,619,2.244,620,2.244,621,3.252,622,2.244,623,2.244,624,2.244,625,2.244,626,3.733,627,3.202,628,4.475,629,3.733,630,3.202,631,2.244,632,2.244,633,2.244,634,2.244,635,2.244,636,2.244,637,2.244,638,2.244,639,2.244,640,3.202,641,2.244,642,2.244,643,2.244,644,2.244,645,3.202,646,2.244,647,2.244,648,2.244,649,2.244,650,2.244,651,3.202,652,2.244,653,2.244,654,1.793,655,1.495,656,2.244,657,2.244,658,2.244,659,2.244,660,2.244,661,2.244,662,2.244,663,2.244,664,1.793,665,2.244,666,2.244,667,2.244,668,2.244,669,2.244,670,2.244,671,2.244,672,2.244,673,2.244,674,2.244,675,2.244,676,2.244,677,2.244,678,2.244,679,2.244,680,2.244,681,2.244,682,2.244,683,2.244,684,2.244,685,2.244,686,2.244,687,3.202,688,2.244,689,3.202,690,4.793,691,2.244,692,2.244,693,2.244,694,2.244,695,2.244,696,2.244,697,3.733,698,3.202,699,3.733,700,3.733,701,3.202,702,2.244,703,2.244,704,2.244,705,2.244,706,2.244,707,2.244,708,2.244,709,3.202,710,2.244,711,2.244,712,2.244,713,2.244,714,2.244,715,2.244,716,2.244,717,2.244,718,2.244,719,3.202,720,2.244,721,2.244,722,2.244,723,2.244,724,2.244,725,2.244,726,2.244,727,2.244,728,2.244,729,2.244,730,2.244,731,2.244,732,2.244,733,2.244,734,2.244,735,2.244,736,2.244,737,2.244,738,1.793,739,2.244,740,2.244]],["title/modules.html",[741,2.905]],["body/modules.html",[32,0.051,76,0.051,77,0.051,741,3.394]],["title/overview.html",[742,2.905]],["body/overview.html",[2,1.545,32,0.051,76,0.051,77,0.051,470,2.061,742,3.372,743,4.221,744,4.221]],["title/properties.html",[20,0.882,621,1.816]],["body/properties.html",[7,0.908,10,0.768,11,0.701,20,1.061,32,0.056,50,0.523,76,0.048,77,0.048,110,2.204,118,1.231,211,1.897,226,2.238,227,2.458,235,1.642,261,2.238,262,1.897,357,2.589,358,2.589,535,3.104,538,3.104,559,2.589,608,3.104,654,3.104,655,2.589,664,3.104,738,3.104,745,3.886,746,3.886,747,3.886,748,3.886,749,3.886,750,3.886,751,3.886,752,3.886,753,4.875,754,3.886,755,3.886,756,3.886,757,3.886,758,3.886,759,3.886,760,3.886]],["title/miscellaneous/typealiases.html",[583,0.96,761,3.231]],["body/miscellaneous/typealiases.html",[6,1.521,19,0.559,32,0.055,34,0.442,47,0.942,48,0.822,49,0.97,50,0.559,51,1.521,76,0.05,77,0.05,583,1.755,762,4.155,763,4.155]],["title/miscellaneous/variables.html",[385,2.153,583,0.96]],["body/miscellaneous/variables.html",[19,0.521,28,0.802,32,0.056,34,0.518,38,1.781,39,0.962,76,0.048,77,0.048,114,2.578,118,1.226,121,2.578,165,3.046,166,3.046,167,3.046,256,2.056,272,2.232,385,2.578,443,2.376,534,3.09,577,3.09,583,1.634,655,3.242,764,4.866,765,3.869,766,5.13,767,3.869,768,3.869,769,3.869,770,3.869,771,3.869,772,4.571,773,3.869]]],"invertedIndex":[["",{"_index":32,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":272,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["0/10",{"_index":565,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":566,"title":{},"body":{"coverage.html":{}}}],["0123456789abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1",{"_index":250,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["1/1",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["1/2",{"_index":576,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":568,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":574,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":74,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"changelog.html":{},"index.html":{}}}],["100",{"_index":569,"title":{},"body":{"coverage.html":{}}}],["1023",{"_index":521,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["11",{"_index":540,"title":{},"body":{"changelog.html":{}}}],["12",{"_index":391,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["12e122f",{"_index":551,"title":{},"body":{"changelog.html":{}}}],["16",{"_index":573,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["1_000_000",{"_index":430,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["1n",{"_index":389,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["2",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2.4.0",{"_index":542,"title":{},"body":{"changelog.html":{}}}],["2/2",{"_index":570,"title":{},"body":{"coverage.html":{}}}],["2/7",{"_index":572,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":567,"title":{},"body":{"coverage.html":{}}}],["20/24",{"_index":564,"title":{},"body":{"coverage.html":{}}}],["2024",{"_index":539,"title":{},"body":{"changelog.html":{}}}],["21/22",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["256",{"_index":597,"title":{},"body":{"miscellaneous/functions.html":{}}}],["28",{"_index":571,"title":{},"body":{"coverage.html":{}}}],["2d528af",{"_index":547,"title":{},"body":{"changelog.html":{}}}],["3",{"_index":744,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":541,"title":{},"body":{"changelog.html":{}}}],["3.0.1",{"_index":538,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["4648",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5",{"_index":394,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["50",{"_index":575,"title":{},"body":{"coverage.html":{}}}],["5453f04",{"_index":555,"title":{},"body":{"changelog.html":{}}}],["6",{"_index":743,"title":{},"body":{"overview.html":{}}}],["7",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["83",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["9",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["95",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["9a",{"_index":444,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["abcdefghijklmnopqrstuvwxyz234567",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz0123456789",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["accessors",{"_index":220,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["add",{"_index":544,"title":{},"body":{"changelog.html":{}}}],["additional",{"_index":484,"title":{},"body":{"classes/MachineIDProviderFactory.html":{}}}],["address",{"_index":488,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["addresses",{"_index":491,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["adjust",{"_index":711,"title":{},"body":{"index.html":{}}}],["against",{"_index":615,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":762,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allocated",{"_index":249,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["allocation",{"_index":234,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["allowing",{"_index":661,"title":{},"body":{"index.html":{}}}],["allows",{"_index":54,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"index.html":{}}}],["another",{"_index":133,"title":{},"body":{"classes/HybridID.html":{}}}],["api",{"_index":717,"title":{},"body":{"index.html":{}}}],["applicable",{"_index":377,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["application",{"_index":640,"title":{},"body":{"index.html":{}}}],["application's",{"_index":306,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["applications",{"_index":685,"title":{},"body":{"index.html":{}}}],["applications—from",{"_index":633,"title":{},"body":{"index.html":{}}}],["approach",{"_index":611,"title":{},"body":{"index.html":{}}}],["architecture",{"_index":637,"title":{},"body":{"index.html":{}}}],["array",{"_index":361,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["assuming",{"_index":713,"title":{},"body":{"index.html":{}}}],["author",{"_index":758,"title":{},"body":{"properties.html":{}}}],["available",{"_index":64,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["base32",{"_index":114,"title":{},"body":{"classes/HybridID.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["base32chars",{"_index":166,"title":{},"body":{"classes/HybridID.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["base62",{"_index":118,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["base62chars",{"_index":165,"title":{},"body":{"classes/HybridID.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["base64",{"_index":121,"title":{},"body":{"classes/HybridID.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["base64chars",{"_index":167,"title":{},"body":{"classes/HybridID.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["based",{"_index":9,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["batch",{"_index":351,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["batchsize",{"_index":366,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["between",{"_index":291,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["bigint",{"_index":105,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["bigint((1",{"_index":457,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["bigint(expirydurationinmillis",{"_index":429,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["bigint(machineidshift",{"_index":456,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["bigint(process.hrtime.bigint",{"_index":428,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["bigint(this.id",{"_index":196,"title":{},"body":{"classes/HybridID.html":{}}}],["bigint(this.sequencebits",{"_index":426,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["bigint(totalbits",{"_index":455,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["bit",{"_index":233,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["bits",{"_index":235,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["boolean",{"_index":135,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["both",{"_index":626,"title":{},"body":{"index.html":{}}}],["bug",{"_index":552,"title":{},"body":{"changelog.html":{}}}],["bugs",{"_index":738,"title":{},"body":{"index.html":{},"properties.html":{}}}],["building",{"_index":638,"title":{},"body":{"index.html":{}}}],["bytesize",{"_index":525,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["cache",{"_index":59,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["cached",{"_index":63,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["cachedmachineid",{"_index":22,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["caches",{"_index":16,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["call",{"_index":354,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["can't",{"_index":467,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["cases",{"_index":679,"title":{},"body":{"index.html":{}}}],["catch",{"_index":451,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["changelog",{"_index":529,"title":{"changelog.html":{}},"body":{"changelog.html":{}}}],["changes",{"_index":275,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"changelog.html":{}}}],["characters",{"_index":443,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["check",{"_index":439,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["checks",{"_index":130,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["choose",{"_index":290,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["class",{"_index":0,"title":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"coverage.html":{},"index.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"overview.html":{}}}],["client",{"_index":627,"title":{},"body":{"index.html":{}}}],["clock",{"_index":296,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["collision",{"_index":748,"title":{},"body":{"properties.html":{}}}],["collisions",{"_index":616,"title":{},"body":{"index.html":{}}}],["combination",{"_index":650,"title":{},"body":{"index.html":{}}}],["combines",{"_index":747,"title":{},"body":{"properties.html":{}}}],["combining",{"_index":347,"title":{},"body":{"classes/HybridIDGenerator.html":{},"index.html":{}}}],["commit",{"_index":536,"title":{},"body":{"changelog.html":{}}}],["commonjs",{"_index":693,"title":{},"body":{"index.html":{}}}],["compare",{"_index":134,"title":{},"body":{"classes/HybridID.html":{}}}],["component",{"_index":264,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["components",{"_index":314,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["configuration",{"_index":241,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/NetworkMachineIDProvider.html":{},"index.html":{}}}],["configuring",{"_index":718,"title":{},"body":{"index.html":{}}}],["conforms",{"_index":329,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["consistent",{"_index":300,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["console.log(`decoded",{"_index":705,"title":{},"body":{"index.html":{}}}],["console.log(`generated",{"_index":700,"title":{},"body":{"index.html":{}}}],["console.log(`is",{"_index":703,"title":{},"body":{"index.html":{}}}],["console.log(`new",{"_index":726,"title":{},"body":{"index.html":{}}}],["const",{"_index":66,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"index.html":{}}}],["constants",{"_index":168,"title":{},"body":{"classes/HybridID.html":{}}}],["constructor",{"_index":26,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"index.html":{}}}],["constructor(envvarname",{"_index":27,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["constructor(id",{"_index":101,"title":{},"body":{"classes/HybridID.html":{}}}],["constructor(interfacename",{"_index":496,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["constructor(maxmachineid",{"_index":518,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["constructor(options",{"_index":222,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["constructor(private",{"_index":177,"title":{},"body":{"classes/HybridID.html":{}}}],["constructs",{"_index":225,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["containing",{"_index":324,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["contains",{"_index":442,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["contributions",{"_index":728,"title":{},"body":{"index.html":{}}}],["convert",{"_index":463,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{}}}],["converts",{"_index":158,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{}}}],["correctly",{"_index":365,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["coverage",{"_index":557,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":110,"title":{},"body":{"classes/HybridID.html":{},"classes/MachineIDProviderFactory.html":{},"miscellaneous/functions.html":{},"properties.html":{}}}],["created",{"_index":346,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["createmachineidprovider",{"_index":475,"title":{},"body":{"classes/MachineIDProviderFactory.html":{}}}],["createmachineidprovider(strategy",{"_index":476,"title":{},"body":{"classes/MachineIDProviderFactory.html":{}}}],["creates",{"_index":103,"title":{},"body":{"classes/HybridID.html":{}}}],["creating",{"_index":474,"title":{},"body":{"classes/MachineIDProviderFactory.html":{}}}],["creation",{"_index":665,"title":{},"body":{"index.html":{}}}],["cross",{"_index":680,"title":{},"body":{"index.html":{}}}],["crypto",{"_index":45,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["cryptographic",{"_index":279,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["current",{"_index":131,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["currenttimestamp",{"_index":427,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["customization",{"_index":675,"title":{},"body":{"index.html":{}}}],["database",{"_index":642,"title":{},"body":{"index.html":{}}}],["date.now",{"_index":302,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["decode",{"_index":440,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["decodebase32",{"_index":173,"title":{},"body":{"classes/HybridID.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["decodebase32(encoded",{"_index":190,"title":{},"body":{"classes/HybridID.html":{},"miscellaneous/functions.html":{}}}],["decodebase62",{"_index":172,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["decodebase62(encoded",{"_index":187,"title":{},"body":{"classes/HybridID.html":{},"miscellaneous/functions.html":{}}}],["decodebase62(encodedid",{"_index":435,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["decodebase64",{"_index":174,"title":{},"body":{"classes/HybridID.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["decodebase64(encoded",{"_index":192,"title":{},"body":{"classes/HybridID.html":{},"miscellaneous/functions.html":{}}}],["decodedid",{"_index":186,"title":{},"body":{"classes/HybridID.html":{},"index.html":{}}}],["decodedid);example",{"_index":706,"title":{},"body":{"index.html":{}}}],["decodes",{"_index":585,"title":{},"body":{"miscellaneous/functions.html":{}}}],["decoding",{"_index":452,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["default",{"_index":38,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/NetworkMachineIDProvider.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":520,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["defined",{"_index":29,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{}}}],["description",{"_index":7,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["deserialize",{"_index":81,"title":{},"body":{"classes/HybridID.html":{}}}],["deserialize(serialized",{"_index":106,"title":{},"body":{"classes/HybridID.html":{}}}],["deserializes",{"_index":108,"title":{},"body":{"classes/HybridID.html":{}}}],["designed",{"_index":606,"title":{},"body":{"index.html":{}}}],["determine",{"_index":257,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["determines",{"_index":327,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["development",{"_index":635,"title":{},"body":{"index.html":{}}}],["different",{"_index":55,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"index.html":{}}}],["distributed",{"_index":619,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":558,"title":{},"body":{"coverage.html":{},"index.html":{}}}],["documented",{"_index":532,"title":{},"body":{"changelog.html":{}}}],["doesn't",{"_index":482,"title":{},"body":{"classes/MachineIDProviderFactory.html":{}}}],["duration",{"_index":668,"title":{},"body":{"index.html":{}}}],["during",{"_index":259,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["each",{"_index":612,"title":{},"body":{"index.html":{}}}],["easier",{"_index":657,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":746,"title":{},"body":{"properties.html":{}}}],["effortlessly",{"_index":624,"title":{},"body":{"index.html":{}}}],["emission",{"_index":240,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["emit",{"_index":343,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["emits",{"_index":660,"title":{},"body":{"index.html":{}}}],["emitted",{"_index":721,"title":{},"body":{"index.html":{}}}],["enable",{"_index":399,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["enabled",{"_index":246,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["enableeventemission",{"_index":203,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["encode",{"_index":588,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encodebase32",{"_index":170,"title":{},"body":{"classes/HybridID.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["encodebase32(input",{"_index":586,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encodebase32(this.id",{"_index":179,"title":{},"body":{"classes/HybridID.html":{}}}],["encodebase62",{"_index":169,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["encodebase62(id",{"_index":433,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["encodebase62(input",{"_index":589,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encodebase62(this.id",{"_index":178,"title":{},"body":{"classes/HybridID.html":{}}}],["encodebase64",{"_index":171,"title":{},"body":{"classes/HybridID.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["encodebase64(input",{"_index":590,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encodebase64(this.id",{"_index":180,"title":{},"body":{"classes/HybridID.html":{}}}],["encoded",{"_index":115,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{}}}],["encodedid",{"_index":283,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["encodes",{"_index":587,"title":{},"body":{"miscellaneous/functions.html":{}}}],["encoding",{"_index":655,"title":{},"body":{"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["encoding/decoding",{"_index":653,"title":{},"body":{"index.html":{}}}],["engineering",{"_index":672,"title":{},"body":{"index.html":{}}}],["enhance",{"_index":670,"title":{},"body":{"index.html":{}}}],["ensures",{"_index":340,"title":{},"body":{"classes/HybridIDGenerator.html":{},"index.html":{}}}],["ensuring",{"_index":651,"title":{},"body":{"index.html":{}}}],["entries",{"_index":643,"title":{},"body":{"index.html":{}}}],["entropy",{"_index":236,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["entropybits",{"_index":204,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["env",{"_index":48,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["environment",{"_index":8,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["environments",{"_index":630,"title":{},"body":{"index.html":{}}}],["envmachineidprovider",{"_index":1,"title":{"classes/EnvMachineIDProvider.html":{}},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"coverage.html":{}}}],["envvarname",{"_index":23,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["equal",{"_index":132,"title":{},"body":{"classes/HybridID.html":{}}}],["error",{"_index":182,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["error('invalid",{"_index":185,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["error(`environment",{"_index":71,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["es",{"_index":694,"title":{},"body":{"index.html":{}}}],["event",{"_index":239,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["eventemitter",{"_index":202,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["events",{"_index":247,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["example",{"_index":690,"title":{},"body":{"index.html":{}}}],["expiration",{"_index":666,"title":{},"body":{"index.html":{}}}],["expired",{"_index":667,"title":{},"body":{"index.html":{}}}],["expiry",{"_index":750,"title":{},"body":{"properties.html":{}}}],["expirydurationinmillis",{"_index":334,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["export",{"_index":46,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["extend",{"_index":550,"title":{},"body":{"changelog.html":{}}}],["extends",{"_index":201,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["extract",{"_index":321,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["extracted",{"_index":319,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["extracts",{"_index":313,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["ezzat",{"_index":760,"title":{},"body":{"properties.html":{}}}],["f497a81",{"_index":556,"title":{},"body":{"changelog.html":{}}}],["facilitating",{"_index":656,"title":{},"body":{"index.html":{}}}],["factory",{"_index":473,"title":{},"body":{"classes/MachineIDProviderFactory.html":{}}}],["failure",{"_index":375,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["false",{"_index":137,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["feature",{"_index":739,"title":{},"body":{"index.html":{}}}],["features",{"_index":543,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["feel",{"_index":731,"title":{},"body":{"index.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"changelog.html":{},"coverage.html":{}}}],["final",{"_index":345,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["first",{"_index":498,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{},"miscellaneous/functions.html":{}}}],["fix",{"_index":545,"title":{},"body":{"changelog.html":{}}}],["fixes",{"_index":553,"title":{},"body":{"changelog.html":{}}}],["flag",{"_index":243,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["flexibility",{"_index":289,"title":{},"body":{"classes/HybridIDGenerator.html":{},"index.html":{}}}],["flexible",{"_index":678,"title":{},"body":{"index.html":{}}}],["follows",{"_index":724,"title":{},"body":{"index.html":{}}}],["format",{"_index":255,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["formats",{"_index":696,"title":{},"body":{"index.html":{}}}],["found",{"_index":499,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["free",{"_index":732,"title":{},"body":{"index.html":{}}}],["frombase32",{"_index":82,"title":{},"body":{"classes/HybridID.html":{}}}],["frombase32(encoded",{"_index":112,"title":{},"body":{"classes/HybridID.html":{}}}],["frombase62",{"_index":83,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{}}}],["frombase62(encoded",{"_index":116,"title":{},"body":{"classes/HybridID.html":{}}}],["frombase62(encodedid",{"_index":281,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["frombase64",{"_index":84,"title":{},"body":{"classes/HybridID.html":{}}}],["frombase64(encoded",{"_index":119,"title":{},"body":{"classes/HybridID.html":{}}}],["fromhex",{"_index":85,"title":{},"body":{"classes/HybridID.html":{}}}],["fromhex(hex",{"_index":122,"title":{},"body":{"classes/HybridID.html":{}}}],["function",{"_index":580,"title":{},"body":{"coverage.html":{}}}],["functionality",{"_index":549,"title":{},"body":{"changelog.html":{},"index.html":{}}}],["functions",{"_index":280,"title":{"miscellaneous/functions.html":{}},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["further",{"_index":437,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["generate",{"_index":367,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["generated",{"_index":253,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["generaterandom",{"_index":86,"title":{},"body":{"classes/HybridID.html":{}}}],["generaterandombits",{"_index":386,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["generaterandombits(randombits",{"_index":591,"title":{},"body":{"miscellaneous/functions.html":{}}}],["generaterandommachineid",{"_index":516,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["generates",{"_index":127,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["generating",{"_index":57,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{}}}],["generation",{"_index":231,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["generator",{"_index":227,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{},"properties.html":{}}}],["generator/issues",{"_index":754,"title":{},"body":{"properties.html":{}}}],["generatorusage",{"_index":691,"title":{},"body":{"index.html":{}}}],["getcryptographicrandomvalue",{"_index":517,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["getcryptographicrandomvalue(bytesize",{"_index":523,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["getmachineid",{"_index":25,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["getoptions",{"_index":379,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["gets",{"_index":381,"title":{},"body":{"classes/HybridIDGenerator.html":{},"index.html":{}}}],["getter",{"_index":382,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["gettimestamp",{"_index":214,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["gettimestamp(usehighrestime",{"_index":284,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["getting",{"_index":527,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["getvalidmac",{"_index":494,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["getvalidmac(iface",{"_index":502,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["given",{"_index":312,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["gives",{"_index":303,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["greater",{"_index":141,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{}}}],["guidelines",{"_index":537,"title":{},"body":{"changelog.html":{}}}],["handle",{"_index":489,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["handles",{"_index":338,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["handling",{"_index":356,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["hash",{"_index":599,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hashing",{"_index":598,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hashmactomachineid",{"_index":495,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["hashmactomachineid(mac",{"_index":506,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["here’s",{"_index":707,"title":{},"body":{"index.html":{}}}],["hex",{"_index":125,"title":{},"body":{"classes/HybridID.html":{}}}],["hexadecimal",{"_index":124,"title":{},"body":{"classes/HybridID.html":{}}}],["high",{"_index":292,"title":{},"body":{"classes/HybridIDGenerator.html":{},"index.html":{}}}],["highly",{"_index":613,"title":{},"body":{"index.html":{}}}],["homepage",{"_index":752,"title":{},"body":{"properties.html":{}}}],["https://github.com/miladezzat/hybrid",{"_index":753,"title":{},"body":{"properties.html":{}}}],["hybrid",{"_index":226,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{},"properties.html":{}}}],["hybridid",{"_index":78,"title":{"classes/HybridID.html":{}},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"coverage.html":{}}}],["hybridid(bigint('0x",{"_index":194,"title":{},"body":{"classes/HybridID.html":{}}}],["hybridid(decodedid",{"_index":188,"title":{},"body":{"classes/HybridID.html":{}}}],["hybridid).tobigint",{"_index":432,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["hybridid).tostring",{"_index":434,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["hybrididgenerator",{"_index":199,"title":{"classes/HybridIDGenerator.html":{}},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"coverage.html":{},"index.html":{}}}],["hybrididgeneratoroptions",{"_index":223,"title":{"interfaces/HybridIDGeneratorOptions.html":{}},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"coverage.html":{},"index.html":{}}}],["hybrididinfo",{"_index":322,"title":{"interfaces/HybridIDInfo.html":{}},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"coverage.html":{},"index.html":{}}}],["id",{"_index":11,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["id's",{"_index":332,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["ideal",{"_index":618,"title":{},"body":{"index.html":{}}}],["identifier",{"_index":559,"title":{},"body":{"coverage.html":{},"index.html":{},"properties.html":{}}}],["identifiers",{"_index":608,"title":{},"body":{"index.html":{},"properties.html":{}}}],["idgenerated",{"_index":720,"title":{},"body":{"index.html":{}}}],["idgenerator",{"_index":697,"title":{},"body":{"index.html":{}}}],["idgenerator.decode(uniqueid",{"_index":704,"title":{},"body":{"index.html":{}}}],["idgenerator.ishybridid(uniqueid",{"_index":702,"title":{},"body":{"index.html":{}}}],["idgenerator.nextid",{"_index":699,"title":{},"body":{"index.html":{}}}],["idgenerator.nextid();contributing",{"_index":727,"title":{},"body":{"index.html":{}}}],["idgenerator.on('idgenerated",{"_index":725,"title":{},"body":{"index.html":{}}}],["ids",{"_index":262,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{},"properties.html":{}}}],["id}`);client",{"_index":710,"title":{},"body":{"index.html":{}}}],["iface",{"_index":505,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["implementation",{"_index":510,"title":{},"body":{"classes/RandomMachineIDProvider.html":{},"index.html":{}}}],["implements",{"_index":17,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["import",{"_index":43,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"index.html":{}}}],["importing",{"_index":692,"title":{},"body":{"index.html":{}}}],["improve",{"_index":512,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["includes",{"_index":674,"title":{},"body":{"index.html":{}}}],["including",{"_index":232,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["incrementing",{"_index":341,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["index",{"_index":19,"title":{"index.html":{}},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicates",{"_index":320,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["indicating",{"_index":244,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"changelog.html":{}}}],["info(id",{"_index":309,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["information",{"_index":311,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["initial",{"_index":403,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["initialize",{"_index":709,"title":{},"body":{"index.html":{}}}],["initializes",{"_index":228,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["innovative",{"_index":610,"title":{},"body":{"index.html":{}}}],["input",{"_index":328,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{}}}],["install",{"_index":687,"title":{},"body":{"index.html":{}}}],["installation",{"_index":686,"title":{},"body":{"index.html":{}}}],["instance",{"_index":104,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["instanceof",{"_index":431,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["instances",{"_index":652,"title":{},"body":{"index.html":{}}}],["integration",{"_index":663,"title":{},"body":{"index.html":{}}}],["interface",{"_index":52,"title":{"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{}},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"coverage.html":{}}}],["interfacename",{"_index":493,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["interfaces",{"_index":470,"title":{},"body":{"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"index.html":{},"overview.html":{}}}],["interpreted",{"_index":480,"title":{},"body":{"classes/MachineIDProviderFactory.html":{}}}],["invalid",{"_index":183,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["invalidation",{"_index":376,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["isequal",{"_index":87,"title":{},"body":{"classes/HybridID.html":{}}}],["isequal(other",{"_index":128,"title":{},"body":{"classes/HybridID.html":{}}}],["isgreaterthan",{"_index":88,"title":{},"body":{"classes/HybridID.html":{}}}],["isgreaterthan(other",{"_index":139,"title":{},"body":{"classes/HybridID.html":{}}}],["ishybridid",{"_index":215,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["ishybridid(id",{"_index":325,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["isidexpired",{"_index":216,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["isidexpired(id",{"_index":333,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["islessthan",{"_index":89,"title":{},"body":{"classes/HybridID.html":{}}}],["islessthan(other",{"_index":142,"title":{},"body":{"classes/HybridID.html":{}}}],["isnan(machineid",{"_index":75,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["issue",{"_index":737,"title":{},"body":{"index.html":{}}}],["isvalid",{"_index":701,"title":{},"body":{"index.html":{}}}],["isvalidateid",{"_index":546,"title":{},"body":{"changelog.html":{}}}],["isvalidbase32",{"_index":90,"title":{},"body":{"classes/HybridID.html":{}}}],["isvalidbase32(encoded",{"_index":145,"title":{},"body":{"classes/HybridID.html":{}}}],["isvalidbase62",{"_index":91,"title":{},"body":{"classes/HybridID.html":{}}}],["isvalidbase62(encoded",{"_index":150,"title":{},"body":{"classes/HybridID.html":{}}}],["isvalidbase64",{"_index":92,"title":{},"body":{"classes/HybridID.html":{}}}],["isvalidbase64(encoded",{"_index":152,"title":{},"body":{"classes/HybridID.html":{}}}],["it's",{"_index":449,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["json",{"_index":109,"title":{},"body":{"classes/HybridID.html":{}}}],["keywords",{"_index":751,"title":{},"body":{"properties.html":{}}}],["last",{"_index":252,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["lasttimestamp",{"_index":205,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["lengths",{"_index":677,"title":{},"body":{"index.html":{}}}],["less",{"_index":144,"title":{},"body":{"classes/HybridID.html":{}}}],["library",{"_index":605,"title":{},"body":{"index.html":{}}}],["license",{"_index":755,"title":{},"body":{"properties.html":{}}}],["listen",{"_index":723,"title":{},"body":{"index.html":{}}}],["literal",{"_index":378,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["loop",{"_index":424,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["mac",{"_index":487,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["machine",{"_index":10,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{}}}],["machine_id",{"_index":60,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["machineid",{"_index":72,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["machineidbits",{"_index":206,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["machineidprovider",{"_index":18,"title":{"interfaces/MachineIDProvider.html":{}},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"coverage.html":{}}}],["machineidproviderfactory",{"_index":472,"title":{"classes/MachineIDProviderFactory.html":{}},"body":{"classes/MachineIDProviderFactory.html":{},"coverage.html":{}}}],["machineidshift",{"_index":469,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["machineidstr",{"_index":67,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["machineidstrategy",{"_index":47,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["making",{"_index":617,"title":{},"body":{"index.html":{}}}],["managing",{"_index":363,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["mask",{"_index":397,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["masked",{"_index":267,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["masking",{"_index":238,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["masktimestamp",{"_index":207,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["matching",{"_index":77,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maximum",{"_index":269,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{}}}],["maxmachineid",{"_index":208,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/MachineIDProviderFactory.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["maxsequence",{"_index":209,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["meets",{"_index":648,"title":{},"body":{"index.html":{}}}],["method",{"_index":287,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"changelog.html":{}}}],["methods",{"_index":24,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"index.html":{}}}],["microservices",{"_index":636,"title":{},"body":{"index.html":{}}}],["milad",{"_index":759,"title":{},"body":{"properties.html":{}}}],["milliseconds",{"_index":304,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["miscellaneous",{"_index":583,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":756,"title":{},"body":{"properties.html":{}}}],["module",{"_index":695,"title":{},"body":{"index.html":{}}}],["modules",{"_index":741,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":305,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["multiple",{"_index":490,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["name",{"_index":33,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{}}}],["nanoseconds",{"_index":286,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["necessary",{"_index":342,"title":{},"body":{"classes/HybridIDGenerator.html":{},"index.html":{}}}],["need",{"_index":438,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["needed",{"_index":258,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["needs",{"_index":649,"title":{},"body":{"index.html":{}}}],["network",{"_index":49,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["networkmachineidprovider",{"_index":486,"title":{"classes/NetworkMachineIDProvider.html":{}},"body":{"classes/NetworkMachineIDProvider.html":{},"coverage.html":{}}}],["new",{"_index":70,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"coverage.html":{},"index.html":{}}}],["newid",{"_index":715,"title":{},"body":{"index.html":{}}}],["newid.tostring()}`);api",{"_index":716,"title":{},"body":{"index.html":{}}}],["newly",{"_index":348,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["next",{"_index":337,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["nextid",{"_index":217,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["nextids",{"_index":218,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["nextids(batchsize",{"_index":349,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["non",{"_index":593,"title":{},"body":{"miscellaneous/functions.html":{}}}],["notable",{"_index":530,"title":{},"body":{"changelog.html":{}}}],["npm",{"_index":689,"title":{},"body":{"index.html":{}}}],["null",{"_index":37,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["number",{"_index":36,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["number((id",{"_index":459,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["numbers",{"_index":357,"title":{},"body":{"classes/HybridIDGenerator.html":{},"index.html":{},"properties.html":{}}}],["obfuscated",{"_index":600,"title":{},"body":{"miscellaneous/functions.html":{}}}],["obfuscates",{"_index":594,"title":{},"body":{"miscellaneous/functions.html":{}}}],["obfuscatetimestamp",{"_index":387,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["obfuscatetimestamp(timestamp",{"_index":422,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{}}}],["obfuscation",{"_index":339,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["object",{"_index":323,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["offering",{"_index":631,"title":{},"body":{"index.html":{}}}],["offers",{"_index":492,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{},"index.html":{}}}],["one",{"_index":353,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["open",{"_index":736,"title":{},"body":{"index.html":{}}}],["optimized",{"_index":622,"title":{},"body":{"index.html":{}}}],["optimizes",{"_index":359,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["option",{"_index":592,"title":{},"body":{"miscellaneous/functions.html":{},"index.html":{}}}],["optional",{"_index":35,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":221,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/NetworkMachineIDProvider.html":{},"index.html":{}}}],["options.enableeventemission",{"_index":417,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.enableeventemission=false",{"_index":398,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.entropybits",{"_index":411,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.entropybits=5",{"_index":393,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.machineid",{"_index":402,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.machineidbits",{"_index":419,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.machineidbits=12",{"_index":400,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.machineidstrategy",{"_index":401,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.masktimestamp",{"_index":415,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.masktimestamp=false",{"_index":396,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.randombits",{"_index":409,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.randombits=10",{"_index":392,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.sequencebits",{"_index":407,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.sequencebits=12",{"_index":390,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.usecrypto",{"_index":413,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["options.usecrypto=false",{"_index":395,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["os",{"_index":44,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["os.networkinterfaceinfo",{"_index":503,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["other.id",{"_index":198,"title":{},"body":{"classes/HybridID.html":{}}}],["otherwise",{"_index":138,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["overflow",{"_index":364,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["overview",{"_index":742,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":621,"title":{"properties.html":{}},"body":{"index.html":{}}}],["param",{"_index":176,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["parameters",{"_index":31,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["parseint(machineidstr",{"_index":73,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["passed",{"_index":461,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["path",{"_index":712,"title":{},"body":{"index.html":{}}}],["performance",{"_index":639,"title":{},"body":{"index.html":{}}}],["performs",{"_index":331,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["platform",{"_index":681,"title":{},"body":{"index.html":{}}}],["please",{"_index":730,"title":{},"body":{"index.html":{}}}],["point",{"_index":453,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["portion",{"_index":318,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["powerful",{"_index":603,"title":{},"body":{"index.html":{}}}],["preallocating",{"_index":360,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["precision",{"_index":299,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["predetermined",{"_index":669,"title":{},"body":{"index.html":{}}}],["predictability",{"_index":515,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["prevent",{"_index":671,"title":{},"body":{"index.html":{}}}],["prevention",{"_index":749,"title":{},"body":{"properties.html":{}}}],["private",{"_index":21,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["process.env[this.envvarname",{"_index":68,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["process.hrtime.bigint",{"_index":298,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["processing",{"_index":316,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["produce",{"_index":607,"title":{},"body":{"index.html":{}}}],["produces",{"_index":352,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["project",{"_index":531,"title":{},"body":{"changelog.html":{}}}],["properties",{"_index":20,"title":{"properties.html":{}},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"index.html":{},"properties.html":{}}}],["property",{"_index":719,"title":{},"body":{"index.html":{}}}],["provided",{"_index":315,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/NetworkMachineIDProvider.html":{}}}],["provider",{"_index":12,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["providers",{"_index":53,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["provides",{"_index":288,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["pull",{"_index":734,"title":{},"body":{"index.html":{}}}],["quick",{"_index":708,"title":{},"body":{"index.html":{}}}],["random",{"_index":50,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["randombits",{"_index":210,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["randommachineidprovider",{"_index":508,"title":{"classes/RandomMachineIDProvider.html":{}},"body":{"classes/RandomMachineIDProvider.html":{},"coverage.html":{}}}],["range",{"_index":458,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["real",{"_index":645,"title":{},"body":{"index.html":{}}}],["reason",{"_index":374,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["reassign",{"_index":448,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["reduce",{"_index":514,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["related",{"_index":230,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["reliable",{"_index":646,"title":{},"body":{"index.html":{}}}],["remove",{"_index":466,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["repository",{"_index":757,"title":{},"body":{"properties.html":{}}}],["representation",{"_index":156,"title":{},"body":{"classes/HybridID.html":{},"miscellaneous/functions.html":{}}}],["request",{"_index":735,"title":{},"body":{"index.html":{}}}],["requests",{"_index":740,"title":{},"body":{"index.html":{}}}],["require",{"_index":483,"title":{},"body":{"classes/MachineIDProviderFactory.html":{}}}],["requirements",{"_index":307,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["requires",{"_index":641,"title":{},"body":{"index.html":{}}}],["resets",{"_index":274,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["resilient",{"_index":614,"title":{},"body":{"index.html":{}}}],["resolution",{"_index":293,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["result",{"_index":362,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["results",{"_index":76,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"changelog.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieves",{"_index":13,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["retrieving",{"_index":58,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{}}}],["return",{"_index":62,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["returns",{"_index":42,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{}}}],["reverse",{"_index":468,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["rfc",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["right",{"_index":465,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["robust",{"_index":745,"title":{},"body":{"properties.html":{}}}],["runs",{"_index":301,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["seamless",{"_index":662,"title":{},"body":{"index.html":{}}}],["seamlessly",{"_index":609,"title":{},"body":{"index.html":{}}}],["security",{"_index":513,"title":{},"body":{"classes/RandomMachineIDProvider.html":{},"index.html":{}}}],["see",{"_index":533,"title":{},"body":{"changelog.html":{}}}],["sequence",{"_index":211,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{},"properties.html":{}}}],["sequencebits",{"_index":212,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["serialize",{"_index":93,"title":{},"body":{"classes/HybridID.html":{}}}],["serialized",{"_index":111,"title":{},"body":{"classes/HybridID.html":{}}}],["serializes",{"_index":155,"title":{},"body":{"classes/HybridID.html":{}}}],["server",{"_index":629,"title":{},"body":{"index.html":{}}}],["settings",{"_index":383,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["sha",{"_index":596,"title":{},"body":{"miscellaneous/functions.html":{}}}],["shift",{"_index":464,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["side",{"_index":628,"title":{},"body":{"index.html":{}}}],["single",{"_index":478,"title":{},"body":{"classes/MachineIDProviderFactory.html":{},"index.html":{}}}],["solution",{"_index":647,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["specified",{"_index":14,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["src/.../constants.ts",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../machineidprovider.ts",{"_index":763,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../utils.ts",{"_index":584,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/constants.ts",{"_index":577,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/hybridid.ts",{"_index":79,"title":{},"body":{"classes/HybridID.html":{},"coverage.html":{}}}],["src/hybridid.ts:107",{"_index":161,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:115",{"_index":164,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:124",{"_index":129,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:133",{"_index":140,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:142",{"_index":143,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:151",{"_index":151,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:16",{"_index":159,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:162",{"_index":146,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:174",{"_index":153,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:193",{"_index":154,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:202",{"_index":107,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:211",{"_index":126,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:24",{"_index":157,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:32",{"_index":160,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:42",{"_index":117,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:5",{"_index":102,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:56",{"_index":113,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:70",{"_index":120,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:82",{"_index":162,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:91",{"_index":123,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybridid.ts:99",{"_index":163,"title":{},"body":{"classes/HybridID.html":{}}}],["src/hybrididgenerator.ts",{"_index":200,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"coverage.html":{}}}],["src/hybrididgenerator.ts:103",{"_index":270,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:110",{"_index":268,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:117",{"_index":263,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:124",{"_index":224,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:181",{"_index":380,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:216",{"_index":336,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:261",{"_index":350,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:327",{"_index":285,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:338",{"_index":335,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:348",{"_index":369,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:35",{"_index":260,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:356",{"_index":282,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:379",{"_index":326,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:434",{"_index":371,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:44",{"_index":273,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:464",{"_index":310,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:54",{"_index":251,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:61",{"_index":276,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:68",{"_index":271,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:75",{"_index":248,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:82",{"_index":277,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:89",{"_index":266,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/hybrididgenerator.ts:96",{"_index":242,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["src/machineidprovider.ts",{"_index":6,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/machineidprovider.ts:108",{"_index":507,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["src/machineidprovider.ts:12",{"_index":471,"title":{},"body":{"interfaces/MachineIDProvider.html":{}}}],["src/machineidprovider.ts:120",{"_index":519,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["src/machineidprovider.ts:129",{"_index":526,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["src/machineidprovider.ts:133",{"_index":522,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["src/machineidprovider.ts:138",{"_index":524,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["src/machineidprovider.ts:154",{"_index":477,"title":{},"body":{"classes/MachineIDProviderFactory.html":{}}}],["src/machineidprovider.ts:20",{"_index":40,"title":{},"body":{"classes/EnvMachineIDProvider.html":{}}}],["src/machineidprovider.ts:21",{"_index":30,"title":{},"body":{"classes/EnvMachineIDProvider.html":{}}}],["src/machineidprovider.ts:27",{"_index":41,"title":{},"body":{"classes/EnvMachineIDProvider.html":{}}}],["src/machineidprovider.ts:54",{"_index":500,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["src/machineidprovider.ts:55",{"_index":497,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["src/machineidprovider.ts:65",{"_index":501,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["src/machineidprovider.ts:99",{"_index":504,"title":{},"body":{"classes/NetworkMachineIDProvider.html":{}}}],["src/utils.ts",{"_index":579,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["standard",{"_index":534,"title":{},"body":{"changelog.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":528,"title":{"changelog.html":{},"index.html":{}},"body":{}}],["state",{"_index":384,"title":{},"body":{"classes/HybridIDGenerator.html":{},"index.html":{}}}],["statements",{"_index":560,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":80,"title":{},"body":{"classes/HybridID.html":{},"classes/MachineIDProviderFactory.html":{}}}],["storage",{"_index":658,"title":{},"body":{"index.html":{}}}],["strategies",{"_index":56,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["strategy",{"_index":265,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/MachineIDProviderFactory.html":{},"miscellaneous/functions.html":{}}}],["string",{"_index":28,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":330,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["submit",{"_index":733,"title":{},"body":{"index.html":{}}}],["such",{"_index":676,"title":{},"body":{"index.html":{}}}],["super",{"_index":405,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["support",{"_index":682,"title":{},"body":{"index.html":{}}}],["supported",{"_index":714,"title":{},"body":{"index.html":{}}}],["supports",{"_index":654,"title":{},"body":{"index.html":{},"properties.html":{}}}],["systems",{"_index":620,"title":{},"body":{"index.html":{}}}],["table",{"_index":582,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":581,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":554,"title":{},"body":{"changelog.html":{}}}],["this.cachedmachineid",{"_index":65,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["this.enableeventemission",{"_index":416,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["this.entropybits",{"_index":410,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["this.envvarname",{"_index":61,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["this.frombase62(id",{"_index":450,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["this.gettimestamp",{"_index":421,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["this.id",{"_index":197,"title":{},"body":{"classes/HybridID.html":{}}}],["this.id.tostring",{"_index":195,"title":{},"body":{"classes/HybridID.html":{}}}],["this.id.tostring(16",{"_index":193,"title":{},"body":{"classes/HybridID.html":{}}}],["this.ishybridid(id",{"_index":462,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["this.isvalidbase32(encoded",{"_index":189,"title":{},"body":{"classes/HybridID.html":{}}}],["this.isvalidbase62(encoded",{"_index":184,"title":{},"body":{"classes/HybridID.html":{}}}],["this.isvalidbase64(encoded",{"_index":191,"title":{},"body":{"classes/HybridID.html":{}}}],["this.lasttimestamp",{"_index":423,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["this.machineidbits",{"_index":418,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["this.masktimestamp",{"_index":414,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["this.maxmachineid",{"_index":420,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["this.maxsequence",{"_index":460,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["this.randombits",{"_index":408,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["this.sequencebits",{"_index":406,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["this.usecrypto",{"_index":412,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["through",{"_index":425,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["throw",{"_index":69,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{}}}],["thrown",{"_index":317,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["throws",{"_index":181,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["time",{"_index":297,"title":{},"body":{"classes/HybridIDGenerator.html":{},"index.html":{}}}],["timestamp",{"_index":254,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"changelog.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["timestamps",{"_index":358,"title":{},"body":{"classes/HybridIDGenerator.html":{},"index.html":{},"properties.html":{}}}],["timing",{"_index":294,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["tobase32",{"_index":94,"title":{},"body":{"classes/HybridID.html":{}}}],["tobase62",{"_index":95,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{}}}],["tobase62(id",{"_index":368,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["tobase64",{"_index":96,"title":{},"body":{"classes/HybridID.html":{}}}],["tobigint",{"_index":97,"title":{},"body":{"classes/HybridID.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["tobigint(input",{"_index":601,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tohex",{"_index":98,"title":{},"body":{"classes/HybridID.html":{}}}],["tostring",{"_index":99,"title":{},"body":{"classes/HybridID.html":{}}}],["totalbits",{"_index":454,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["track",{"_index":644,"title":{},"body":{"index.html":{}}}],["tracking",{"_index":664,"title":{},"body":{"index.html":{},"properties.html":{}}}],["transmission",{"_index":659,"title":{},"body":{"index.html":{}}}],["treated",{"_index":481,"title":{},"body":{"classes/MachineIDProviderFactory.html":{}}}],["true",{"_index":136,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["try",{"_index":447,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["type",{"_index":34,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":761,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":441,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["typescript",{"_index":604,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":51,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":261,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{},"properties.html":{}}}],["uniqueid",{"_index":698,"title":{},"body":{"index.html":{}}}],["uniqueness",{"_index":355,"title":{},"body":{"classes/HybridIDGenerator.html":{},"index.html":{}}}],["update",{"_index":548,"title":{},"body":{"changelog.html":{}}}],["upon",{"_index":344,"title":{},"body":{"classes/HybridIDGenerator.html":{},"index.html":{}}}],["use",{"_index":278,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/NetworkMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["usecrypto",{"_index":213,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["used",{"_index":256,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/NetworkMachineIDProvider.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["usehighrestime",{"_index":308,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["uses",{"_index":372,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/RandomMachineIDProvider.html":{}}}],["using",{"_index":595,"title":{},"body":{"miscellaneous/functions.html":{}}}],["utilized",{"_index":625,"title":{},"body":{"index.html":{}}}],["utils",{"_index":175,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["valid",{"_index":148,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"classes/NetworkMachineIDProvider.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["validate",{"_index":149,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["validated",{"_index":404,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{}}}],["validateid",{"_index":219,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["validateid(id",{"_index":370,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["validatemachineid",{"_index":388,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["validatemachineid(machineidstrategy",{"_index":602,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validates",{"_index":147,"title":{},"body":{"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{}}}],["validation",{"_index":673,"title":{},"body":{"index.html":{}}}],["validity",{"_index":373,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["value",{"_index":39,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"classes/HybridID.html":{},"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["valueof",{"_index":100,"title":{},"body":{"classes/HybridID.html":{}}}],["values",{"_index":511,"title":{},"body":{"classes/RandomMachineIDProvider.html":{}}}],["var",{"_index":479,"title":{},"body":{"classes/MachineIDProviderFactory.html":{}}}],["variable",{"_index":15,"title":{},"body":{"classes/EnvMachineIDProvider.html":{},"interfaces/MachineIDProvider.html":{},"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{},"classes/RandomMachineIDProvider.html":{},"coverage.html":{}}}],["variables",{"_index":385,"title":{"miscellaneous/variables.html":{}},"body":{"classes/HybridIDGenerator.html":{},"miscellaneous/variables.html":{}}}],["various",{"_index":229,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"index.html":{}}}],["versatile",{"_index":684,"title":{},"body":{"index.html":{}}}],["versatility",{"_index":623,"title":{},"body":{"index.html":{}}}],["version",{"_index":535,"title":{},"body":{"changelog.html":{},"properties.html":{}}}],["via",{"_index":688,"title":{},"body":{"index.html":{}}}],["wall",{"_index":295,"title":{},"body":{"classes/HybridIDGenerator.html":{}}}],["web",{"_index":634,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":729,"title":{},"body":{"index.html":{}}}],["well",{"_index":237,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["whenever",{"_index":722,"title":{},"body":{"index.html":{}}}],["whether",{"_index":245,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["wide",{"_index":632,"title":{},"body":{"index.html":{}}}],["within",{"_index":509,"title":{},"body":{"classes/RandomMachineIDProvider.html":{},"miscellaneous/functions.html":{}}}],["without",{"_index":436,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["work",{"_index":683,"title":{},"body":{"index.html":{}}}],["yes",{"_index":485,"title":{},"body":{"classes/MachineIDProviderFactory.html":{},"classes/NetworkMachineIDProvider.html":{}}}],["z",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z]+$/.test(id",{"_index":446,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}],["za",{"_index":445,"title":{},"body":{"classes/HybridIDGenerator.html":{},"interfaces/HybridIDGeneratorOptions.html":{},"interfaces/HybridIDInfo.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/EnvMachineIDProvider.html":{"url":"classes/EnvMachineIDProvider.html","title":"class - EnvMachineIDProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EnvMachineIDProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MachineIDProvider.ts\n        \n\n\n            \n                Description\n            \n            \n                Environment-based machine ID provider.\nRetrieves the machine ID from a specified environment variable and caches it.\n\n            \n\n\n            \n                Implements\n            \n            \n                            MachineIDProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cachedMachineId\n                            \n                            \n                                    Private\n                                envVarName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMachineId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(envVarName: string)\n                    \n                \n                        \n                            \n                                Defined in src/MachineIDProvider.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        envVarName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cachedMachineId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/MachineIDProvider.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        envVarName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/MachineIDProvider.ts:20\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMachineId\n                        \n                    \n                \n            \n            \n                \ngetMachineId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/MachineIDProvider.ts:27\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import os from 'os';\nimport crypto from 'crypto';\n\nexport type MachineIDStrategy = 'env' | 'network' | 'random' | undefined;\n\n/**\n * Interface for machine ID providers.\n * Allows different strategies for generating or retrieving the machine ID.\n */\nexport interface MachineIDProvider {\n    getMachineId(): number;\n}\n\n/**\n * Environment-based machine ID provider.\n * Retrieves the machine ID from a specified environment variable and caches it.\n */\nexport class EnvMachineIDProvider implements MachineIDProvider {\n    private envVarName: string;\n    private cachedMachineId: number | null = null; // Cache variable for the machine ID\n\n    constructor(envVarName: string = 'MACHINE_ID') {\n        this.envVarName = envVarName;\n    }\n\n    getMachineId(): number {\n        // Return cached value if available\n        if (this.cachedMachineId !== null) {\n            return this.cachedMachineId;\n        }\n\n        const machineIdStr = process.env[this.envVarName];\n        if (!machineIdStr) {\n            throw new Error(`Environment variable ${this.envVarName} is not defined`);\n        }\n        const machineId = parseInt(machineIdStr, 10);\n        if (isNaN(machineId) || machineId \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HybridID.html":{"url":"classes/HybridID.html","title":"class - HybridID","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HybridID\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/HybridID.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                deserialize\n                            \n                            \n                                    Static\n                                fromBase32\n                            \n                            \n                                    Static\n                                fromBase62\n                            \n                            \n                                    Static\n                                fromBase64\n                            \n                            \n                                    Static\n                                fromHex\n                            \n                            \n                                    Static\n                                generateRandom\n                            \n                            \n                                isEqual\n                            \n                            \n                                isGreaterThan\n                            \n                            \n                                isLessThan\n                            \n                            \n                                    Static\n                                isValidBase32\n                            \n                            \n                                    Static\n                                isValidBase62\n                            \n                            \n                                    Static\n                                isValidBase64\n                            \n                            \n                                serialize\n                            \n                            \n                                toBase32\n                            \n                            \n                                toBase62\n                            \n                            \n                                toBase64\n                            \n                            \n                                toBigInt\n                            \n                            \n                                toHex\n                            \n                            \n                                toString\n                            \n                            \n                                valueOf\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id:  | string)\n                    \n                \n                        \n                            \n                                Defined in src/HybridID.ts:5\n                            \n                        \n\n                \n                    \n                            Creates an instance of HybridID.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                     | string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe ID value as a bigint or string.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        deserialize\n                        \n                    \n                \n            \n            \n                \n                        \n                    deserialize(serialized: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:202\n                        \n                    \n\n\n            \n                \n                        Deserializes a JSON string to create a HybridID instance.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                serialized\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe serialized JSON string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         HybridID\n\n                        \n                            \n                                A new HybridID instance.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromBase32\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromBase32(encoded: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:56\n                        \n                    \n\n\n            \n                \n                        Creates a HybridID instance from a Base32 encoded string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                encoded\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Base32 encoded string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         HybridID\n\n                        \n                            \n                                A new HybridID instance.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromBase62\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromBase62(encoded: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:42\n                        \n                    \n\n\n            \n                \n                        Creates a HybridID instance from a Base62 encoded string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                encoded\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Base62 encoded string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         HybridID\n\n                        \n                            \n                                A new HybridID instance.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromBase64\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromBase64(encoded: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:70\n                        \n                    \n\n\n            \n                \n                        Creates a HybridID instance from a Base64 encoded string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                encoded\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Base64 encoded string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         HybridID\n\n                        \n                            \n                                A new HybridID instance.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        fromHex\n                        \n                    \n                \n            \n            \n                \n                        \n                    fromHex(hex: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:91\n                        \n                    \n\n\n            \n                \n                        Creates a HybridID instance from a hexadecimal string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                hex\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe hexadecimal string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         HybridID\n\n                        \n                            \n                                A new HybridID instance.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        generateRandom\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateRandom()\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:211\n                        \n                    \n\n\n            \n                \n                        Generates a random HybridID instance.\n\n\n                        \n                            Returns :         HybridID\n\n                        \n                            \n                                A new HybridID instance with a random ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isEqual\n                        \n                    \n                \n            \n            \n                \nisEqual(other: HybridID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:124\n                        \n                    \n\n\n            \n                \n                        Checks if the current HybridID is equal to another.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                other\n                                            \n                                                            HybridID\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe other HybridID to compare with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if equal, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isGreaterThan\n                        \n                    \n                \n            \n            \n                \nisGreaterThan(other: HybridID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:133\n                        \n                    \n\n\n            \n                \n                        Checks if the current HybridID is greater than another.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                other\n                                            \n                                                            HybridID\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe other HybridID to compare with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if greater, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLessThan\n                        \n                    \n                \n            \n            \n                \nisLessThan(other: HybridID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:142\n                        \n                    \n\n\n            \n                \n                        Checks if the current HybridID is less than another.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                other\n                                            \n                                                            HybridID\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe other HybridID to compare with.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if less, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isValidBase32\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidBase32(encoded: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:162\n                        \n                    \n\n\n            \n                \n                        Validates if a Base32 encoded string is valid.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                encoded\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Base32 encoded string to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if valid, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isValidBase62\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidBase62(encoded: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:151\n                        \n                    \n\n\n            \n                \n                        Validates if a Base62 encoded string is valid.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                encoded\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Base62 encoded string to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if valid, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        isValidBase64\n                        \n                    \n                \n            \n            \n                \n                        \n                    isValidBase64(encoded: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:174\n                        \n                    \n\n\n            \n                \n                        Validates if a Base64 encoded string is valid.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                encoded\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Base64 encoded string to validate.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                True if valid, false otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serialize\n                        \n                    \n                \n            \n            \n                \nserialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:193\n                        \n                    \n\n\n            \n                \n                        Serializes the HybridID instance to a JSON string.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The serialized JSON string representation of the HybridID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toBase32\n                        \n                    \n                \n            \n            \n                \ntoBase32()\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:24\n                        \n                    \n\n\n            \n                \n                        Converts the ID to a Base32 encoded string.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The Base32 encoded string representation of the ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toBase62\n                        \n                    \n                \n            \n            \n                \ntoBase62()\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:16\n                        \n                    \n\n\n            \n                \n                        Converts the ID to a Base62 encoded string.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The Base62 encoded string representation of the ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toBase64\n                        \n                    \n                \n            \n            \n                \ntoBase64()\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:32\n                        \n                    \n\n\n            \n                \n                        Converts the ID to a Base64 encoded string.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The Base64 encoded string representation of the ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toBigInt\n                        \n                    \n                \n            \n            \n                \ntoBigInt()\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:107\n                        \n                    \n\n\n            \n                \n                        Converts the ID to a bigint.\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toHex\n                        \n                    \n                \n            \n            \n                \ntoHex()\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:82\n                        \n                    \n\n\n            \n                \n                        Converts the ID to a hexadecimal string.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The hexadecimal representation of the ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toString\n                        \n                    \n                \n            \n            \n                \ntoString()\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:99\n                        \n                    \n\n\n            \n                \n                        Converts the ID to a string.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The string representation of the ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        valueOf\n                        \n                    \n                \n            \n            \n                \nvalueOf()\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridID.ts:115\n                        \n                    \n\n\n            \n                \n                        Returns the ID value as a bigint or string.\n\n\n                        \n                            Returns :      | string\n\n                        \n                            \n                                The ID value.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Base62Chars, Base32Chars, Base64Chars } from \"./constants\";\nimport { encodeBase62, encodeBase32, encodeBase64, decodeBase62, decodeBase32, decodeBase64 } from \"./utils\";\n\nexport class HybridID {\n    /**\n     * Creates an instance of HybridID.\n     * @param id - The ID value as a bigint or string.\n     */\n    constructor(private id: bigint | string) { }\n\n    /**\n     * Converts the ID to a Base62 encoded string.\n     * @returns The Base62 encoded string representation of the ID.\n     */\n    toBase62(): string {\n        return encodeBase62(this.id);\n    }\n\n    /**\n     * Converts the ID to a Base32 encoded string.\n     * @returns The Base32 encoded string representation of the ID.\n     */\n    toBase32(): string {\n        return encodeBase32(this.id);\n    }\n\n    /**\n     * Converts the ID to a Base64 encoded string.\n     * @returns The Base64 encoded string representation of the ID.\n     */\n    toBase64(): string {\n        return encodeBase64(this.id);\n    }\n\n    /**\n     * Creates a HybridID instance from a Base62 encoded string.\n     * @param encoded - The Base62 encoded string.\n     * @returns A new HybridID instance.\n     * @throws Error if the encoded string is invalid.\n     */\n    static fromBase62(encoded: string): HybridID {\n        if (!this.isValidBase62(encoded)) {\n            throw new Error('Invalid Base62 encoded string');\n        }\n        const decodedId = decodeBase62(encoded);\n        return new HybridID(decodedId);\n    }\n\n    /**\n     * Creates a HybridID instance from a Base32 encoded string.\n     * @param encoded - The Base32 encoded string.\n     * @returns A new HybridID instance.\n     * @throws Error if the encoded string is invalid.\n     */\n    static fromBase32(encoded: string): HybridID {\n        if (!this.isValidBase32(encoded)) {\n            throw new Error('Invalid Base32 encoded string');\n        }\n        const decodedId = decodeBase32(encoded);\n        return new HybridID(decodedId);\n    }\n\n    /**\n     * Creates a HybridID instance from a Base64 encoded string.\n     * @param encoded - The Base64 encoded string.\n     * @returns A new HybridID instance.\n     * @throws Error if the encoded string is invalid.\n     */\n    static fromBase64(encoded: string): HybridID {\n        if (!this.isValidBase64(encoded)) {\n            throw new Error('Invalid Base64 encoded string');\n        }\n        const decodedId = decodeBase64(encoded);\n        return new HybridID(decodedId);\n    }\n\n    /**\n     * Converts the ID to a hexadecimal string.\n     * @returns The hexadecimal representation of the ID.\n     */\n    toHex(): string {\n        return this.id.toString(16);\n    }\n\n    /**\n     * Creates a HybridID instance from a hexadecimal string.\n     * @param hex - The hexadecimal string.\n     * @returns A new HybridID instance.\n     */\n    static fromHex(hex: string): HybridID {\n        return new HybridID(BigInt('0x' + hex));\n    }\n\n    /**\n     * Converts the ID to a string.\n     * @returns The string representation of the ID.\n     */\n    toString(): string {\n        return this.id.toString();\n    }\n\n    /**\n     * Converts the ID to a bigint.\n     * @returns The ID as a bigint.\n     */\n    toBigInt(): bigint {\n        return BigInt(this.id);\n    }\n\n    /**\n     * Returns the ID value as a bigint or string.\n     * @returns The ID value.\n     */\n    valueOf(): bigint | string {\n        return this.id;\n    }\n\n    /**\n     * Checks if the current HybridID is equal to another.\n     * @param other - The other HybridID to compare with.\n     * @returns True if equal, false otherwise.\n     */\n    isEqual(other: HybridID): boolean {\n        return this.id === other.id;\n    }\n\n    /**\n     * Checks if the current HybridID is greater than another.\n     * @param other - The other HybridID to compare with.\n     * @returns True if greater, false otherwise.\n     */\n    isGreaterThan(other: HybridID): boolean {\n        return this.id > other.id;\n    }\n\n    /**\n     * Checks if the current HybridID is less than another.\n     * @param other - The other HybridID to compare with.\n     * @returns True if less, false otherwise.\n     */\n    isLessThan(other: HybridID): boolean {\n        return this.id \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/HybridIDGenerator.html":{"url":"classes/HybridIDGenerator.html","title":"class - HybridIDGenerator","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  HybridIDGenerator\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/HybridIDGenerator.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        EventEmitter\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                enableEventEmission\n                            \n                            \n                                    Private\n                                entropyBits\n                            \n                            \n                                    Private\n                                lastTimestamp\n                            \n                            \n                                    Private\n                                machineId\n                            \n                            \n                                    Private\n                                machineIdBits\n                            \n                            \n                                    Private\n                                machineIdStrategy\n                            \n                            \n                                    Private\n                                maskTimestamp\n                            \n                            \n                                    Private\n                                maxMachineId\n                            \n                            \n                                    Private\n                                maxSequence\n                            \n                            \n                                    Private\n                                randomBits\n                            \n                            \n                                    Private\n                                sequence\n                            \n                            \n                                    Private\n                                sequenceBits\n                            \n                            \n                                    Private\n                                useCrypto\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                fromBase62\n                            \n                            \n                                getTimestamp\n                            \n                            \n                                info\n                            \n                            \n                                isHybridID\n                            \n                            \n                                isIdExpired\n                            \n                            \n                                nextId\n                            \n                            \n                                nextIds\n                            \n                            \n                                toBase62\n                            \n                            \n                                validateID\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    options\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(options: HybridIDGeneratorOptions)\n                    \n                \n                        \n                            \n                                Defined in src/HybridIDGenerator.ts:124\n                            \n                        \n\n                \n                    \n                            Constructs a new Hybrid ID generator with the specified options.\nThe constructor initializes various properties related to ID generation,\nincluding bit allocation for the sequence, random bits, and entropy,\nas well as the machine ID and options for masking and event emission.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        options\n                                                  \n                                                        \n                                                                        HybridIDGeneratorOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe configuration options for the ID generator.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        enableEventEmission\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/HybridIDGenerator.ts:96\n                        \n                    \n\n            \n                \n                    Flag indicating whether event emission is enabled for ID generation events.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        entropyBits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/HybridIDGenerator.ts:75\n                        \n                    \n\n            \n                \n                    The number of bits allocated for entropy in the Hybrid ID.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        lastTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Default value : BigInt(-1)\n                    \n                \n                    \n                        \n                                Defined in src/HybridIDGenerator.ts:54\n                        \n                    \n\n            \n                \n                    The last generated timestamp in BigInt format.\nThis is used to determine if a new timestamp is needed\nduring ID generation.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        machineId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/HybridIDGenerator.ts:35\n                        \n                    \n\n            \n                \n                    The machine ID used for generating unique Hybrid IDs.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        machineIdBits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/HybridIDGenerator.ts:117\n                        \n                    \n\n            \n                \n                    The number of bits allocated for the machine ID component of the Hybrid ID.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        machineIdStrategy\n                        \n                    \n                \n            \n                \n                    \n                        Type :         MachineIDStrategy\n\n                    \n                \n                    \n                        \n                                Defined in src/HybridIDGenerator.ts:124\n                        \n                    \n\n            \n                \n                    The strategy used for generating the machine ID.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maskTimestamp\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/HybridIDGenerator.ts:89\n                        \n                    \n\n            \n                \n                    Flag indicating whether the timestamp should be masked during ID generation.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxMachineId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/HybridIDGenerator.ts:110\n                        \n                    \n\n            \n                \n                    The maximum value for the machine ID based on the number of bits allocated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxSequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/HybridIDGenerator.ts:103\n                        \n                    \n\n            \n                \n                    The maximum value for the sequence component based on the number of bits allocated.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        randomBits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/HybridIDGenerator.ts:68\n                        \n                    \n\n            \n                \n                    The number of bits allocated for random bits in the Hybrid ID.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sequence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/HybridIDGenerator.ts:44\n                        \n                    \n\n            \n                \n                    The current sequence number for ID generation.\nThis resets to 0 when the timestamp changes.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        sequenceBits\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/HybridIDGenerator.ts:61\n                        \n                    \n\n            \n                \n                    The number of bits allocated for the sequence component of the Hybrid ID.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        useCrypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                    \n                        \n                                Defined in src/HybridIDGenerator.ts:82\n                        \n                    \n\n            \n                \n                    Flag indicating whether to use cryptographic functions for random number generation.\n\n                \n            \n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        fromBase62\n                        \n                    \n                \n            \n            \n                \nfromBase62(encodedId: string | HybridID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridIDGenerator.ts:356\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                encodedId\n                                            \n                                                            string | HybridID\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTimestamp\n                        \n                    \n                \n            \n            \n                \ngetTimestamp(useHighResTime: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridIDGenerator.ts:327\n                        \n                    \n\n\n            \n                \n                        Retrieves the current timestamp in nanoseconds.\nThis method provides flexibility to choose between high-resolution timing and wall-clock time.\n\nprocess.hrtime.bigint() provides high precision but may not be consistent across runs.\nDate.now() gives a wall-clock time in milliseconds, which is more consistent across runs.\n\nYou can choose which source of time to use based on your application's requirements.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                useHighResTime\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    true\n                                            \n\n                                            \n                                                    \nA boolean flag indicating whether to use high-resolution time (default is true).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        info\n                        \n                    \n                \n            \n            \n                \ninfo(id: HybridID |  | string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridIDGenerator.ts:464\n                        \n                    \n\n\n            \n                \n                        Retrieves information about a given Hybrid ID.\nThis method extracts various components from the Hybrid ID, including the\ntimestamp, machine ID, random bits, and sequence number. If the provided\nID is in Base62 format or an instance of HybridID, it converts it to a\nbigint for processing. If the ID is invalid, an error is thrown.\nIt can be an instance of HybridID, a bigint, or a Base62 encoded string.\n\ntimestamp (bigint): The timestamp portion of the Hybrid ID.\nReturns -1 if the timestamp is masked.\nmachineId (number): The machine ID extracted from the Hybrid ID.\nrandomBits (number): The random bits extracted from the Hybrid ID.\nsequence (number): The sequence number extracted from the Hybrid ID.\nmasked (boolean): Indicates whether the timestamp is masked.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            HybridID |  | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Hybrid ID to extract information from. \nIt can be an instance of HybridID, a bigint, or a Base62 encoded string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         HybridIDInfo\n\n                        \n                            \n                                An object containing the extracted information:\n\ntimestamp (bigint): The timestamp portion of the Hybrid ID. \nReturns -1 if the timestamp is masked.\nmachineId (number): The machine ID extracted from the Hybrid ID.\nrandomBits (number): The random bits extracted from the Hybrid ID.\nsequence (number): The sequence number extracted from the Hybrid ID.\nmasked (boolean): Indicates whether the timestamp is masked.\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isHybridID\n                        \n                    \n                \n            \n            \n                \nisHybridID(id: string |  | HybridID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridIDGenerator.ts:379\n                        \n                    \n\n\n            \n                \n                        Checks whether the given ID is a valid Hybrid ID.\nThis method determines if the input ID is an instance of HybridID,\na valid Base62 encoded string, or a bigint that conforms to the\nHybrid ID structure. It performs various checks on the ID's\ncomponents, including the timestamp, machine ID, random bits,\nand sequence number.\nIt can be a string (Base62 encoded), a bigint, or an instance of HybridID.\nfalse otherwise.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string |  | HybridID\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID to validate. \nIt can be a string (Base62 encoded), a bigint, or an instance of HybridID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         HybridID\n\n                        \n                            \n                                Returns true if the ID is a valid Hybrid ID, \nfalse otherwise.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isIdExpired\n                        \n                    \n                \n            \n            \n                \nisIdExpired(id:  | HybridID, expiryDurationInMillis: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridIDGenerator.ts:338\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                             | HybridID\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                expiryDurationInMillis\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextId\n                        \n                    \n                \n            \n            \n                \nnextId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridIDGenerator.ts:216\n                        \n                    \n\n\n            \n                \n                        Generates the next Hybrid ID.\nThis method constructs a new Hybrid ID based on the current timestamp,\nmachine ID, random bits, and sequence number. It handles timestamp\nobfuscation if enabled, ensures unique ID generation by incrementing\nthe sequence number when necessary, and can emit an event upon ID\ngeneration. The final Hybrid ID is created by combining these components.\n\n\n                        \n                            Returns :         HybridID\n\n                        \n                            \n                                The newly generated Hybrid ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        nextIds\n                        \n                    \n                \n            \n            \n                \nnextIds(batchSize: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridIDGenerator.ts:261\n                        \n                    \n\n\n            \n                \n                        Generates a batch of Hybrid IDs.\nThis method produces a specified number of Hybrid IDs in one call.\nIt ensures uniqueness by handling sequence numbers and timestamps.\nThe method optimizes ID generation by preallocating an array for the\nresult and managing sequence overflow correctly.\nMust be greater than 0.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                batchSize\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of Hybrid IDs to generate. \nMust be greater than 0.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         HybridID[]\n\n                        \n                            \n                                An array of generated Hybrid IDs.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toBase62\n                        \n                    \n                \n            \n            \n                \ntoBase62(id:  | HybridID)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridIDGenerator.ts:348\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                             | HybridID\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateID\n                        \n                    \n                \n            \n            \n                \nvalidateID(id:  | string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/HybridIDGenerator.ts:434\n                        \n                    \n\n\n            \n                \n                        Validates the given ID and checks if it is a valid Hybrid ID.\nThis method uses the isHybridID method to validate the ID.\nIf the ID is valid, it returns an object indicating the validity\nof the ID. If it is invalid, it provides a reason for the failure.\nIt can be a bigint or a Base62 encoded string.\n\nvalid (boolean): Indicates whether the ID is valid.\nreason (string, optional): A reason for invalidation if applicable.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                         | string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID to validate. \nIt can be a bigint or a Base62 encoded string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     literal type\n\n                        \n                            \n                                An object containing:\n\nvalid (boolean): Indicates whether the ID is valid.\nreason (string, optional): A reason for invalidation if applicable.\n\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        options\n                    \n                \n\n                \n                    \n                        getoptions()\n                    \n                \n                            \n                                \n                                    Defined in src/HybridIDGenerator.ts:181\n                                \n                            \n                    \n                        \n                                Gets the current options of the Hybrid ID generator.\nThis getter returns an object containing the configuration settings\nand state variables of the Hybrid ID generator, including the number\nof bits used for different components, the current sequence number,\nlast generated timestamp, maximum sequence, and maximum machine ID.\n  sequence: number;\n  lastTimestamp: bigint;\n  maxSequence: number;\n  maxMachineId: number;\n}} The current options and state of the Hybrid ID generator.\n\n\n                                \n                                \n                        \n                    \n\n            \n        \n\n    \n\n\n    \n        import { EventEmitter } from 'events';\nimport { generateRandomBits, obfuscateTimestamp, encodeBase62, decodeBase62, validateMachineId } from './utils';\nimport { MachineIDStrategy } from \"./MachineIDProvider\";\nimport { HybridID } from './HybridID';\n\n\nexport interface HybridIDGeneratorOptions {\n    sequenceBits?: number;\n    randomBits?: number;\n    entropyBits?: number;\n    useCrypto?: boolean;\n    maskTimestamp?: boolean;\n    enableEventEmission?: boolean;\n    machineIdBits?: number;\n    machineId?: number | string;\n    machineIdStrategy?: 'env' | 'network' | 'random'; // this is the machine id provider strategy\n}\n\nexport interface HybridIDInfo {\n    timestamp: bigint;\n    machineId: number;\n    randomBits: number;\n    sequence: number;\n    masked: boolean;\n}\n\nexport class HybridIDGenerator extends EventEmitter {\n    /**\n     * The machine ID used for generating unique Hybrid IDs.\n     * @private\n     * @type {number}\n     */\n    private machineId: number;\n\n    /**\n     * The current sequence number for ID generation.\n     * This resets to 0 when the timestamp changes.\n     * @private\n     * @type {number}\n     * @default 0\n     */\n    private sequence: number = 0;\n\n    /**\n     * The last generated timestamp in BigInt format.\n     * This is used to determine if a new timestamp is needed\n     * during ID generation.\n     * @private\n     * @type {bigint}\n     * @default -1n\n     */\n    private lastTimestamp: bigint = BigInt(-1);\n\n    /**\n     * The number of bits allocated for the sequence component of the Hybrid ID.\n     * @private\n     * @type {number}\n     */\n    private sequenceBits: number;\n\n    /**\n     * The number of bits allocated for random bits in the Hybrid ID.\n     * @private\n     * @type {number}\n     */\n    private randomBits: number;\n\n    /**\n     * The number of bits allocated for entropy in the Hybrid ID.\n     * @private\n     * @type {number}\n     */\n    private entropyBits: number;\n\n    /**\n     * Flag indicating whether to use cryptographic functions for random number generation.\n     * @private\n     * @type {boolean}\n     */\n    private useCrypto: boolean;\n\n    /**\n     * Flag indicating whether the timestamp should be masked during ID generation.\n     * @private\n     * @type {boolean}\n     */\n    private maskTimestamp: boolean;\n\n    /**\n     * Flag indicating whether event emission is enabled for ID generation events.\n     * @private\n     * @type {boolean}\n     */\n    private enableEventEmission: boolean;\n\n    /**\n     * The maximum value for the sequence component based on the number of bits allocated.\n     * @private\n     * @type {number}\n     */\n    private maxSequence: number;\n\n    /**\n     * The maximum value for the machine ID based on the number of bits allocated.\n     * @private\n     * @type {number}\n     */\n    private maxMachineId: number;\n\n    /**\n     * The number of bits allocated for the machine ID component of the Hybrid ID.\n     * @private\n     * @type {number}\n     */\n    private machineIdBits: number;\n\n    /**\n     * The strategy used for generating the machine ID.\n     * @private\n     * @type {MachineIDStrategy}\n     */\n    private machineIdStrategy: MachineIDStrategy;\n\n\n    /**\n     * Constructs a new Hybrid ID generator with the specified options.\n     *\n     * The constructor initializes various properties related to ID generation,\n     * including bit allocation for the sequence, random bits, and entropy,\n     * as well as the machine ID and options for masking and event emission.\n     *\n     * @param {HybridIDGeneratorOptions} [options={}] - The configuration options for the ID generator.\n     * @param {number} [options.sequenceBits=12] - The number of bits for the sequence component (default: 12).\n     * @param {number} [options.randomBits=10] - The number of bits for the random component (default: 10).\n     * @param {number} [options.entropyBits=5] - The number of bits for the entropy component (default: 5).\n     * @param {boolean} [options.useCrypto=false] - Whether to use cryptographic functions for random generation (default: false).\n     * @param {boolean} [options.maskTimestamp=false] - Whether to mask the timestamp (default: false).\n     * @param {boolean} [options.enableEventEmission=false] - Whether to enable event emission for ID generation (default: false).\n     * @param {number} [options.machineIdBits=12] - The number of bits for the machine ID component (default: 12).\n     * @param {MachineIDStrategy} [options.machineIdStrategy] - The strategy used for generating the machine ID.\n     * @param {number} [options.machineId] - The initial machine ID to use (must be validated).\n     */\n    constructor(options: HybridIDGeneratorOptions = {}) {\n        super();\n\n        this.sequenceBits = options.sequenceBits || 12;\n        this.randomBits = options.randomBits || 10;\n        this.entropyBits = options.entropyBits || 5;\n        this.useCrypto = options.useCrypto || false;\n        this.maskTimestamp = options.maskTimestamp || false;\n        this.enableEventEmission = options.enableEventEmission || false;\n        this.machineIdBits = options.machineIdBits || 12;\n        this.maxMachineId = (1 (batchSize);\n\n        let timestamp = this.getTimestamp();\n        if (this.maskTimestamp) {\n            timestamp = obfuscateTimestamp(timestamp);\n        }\n\n        // Cache the last generated timestamp\n        let lastTimestamp = this.lastTimestamp;\n\n        // Loop through the batchSize to generate IDs\n        for (let i = 0; i > BigInt(this.sequenceBits + this.randomBits + this.entropyBits + this.machineIdBits);\n        const currentTimestamp = BigInt(process.hrtime.bigint());\n        return (currentTimestamp - timestamp) > BigInt(expiryDurationInMillis * 1_000_000);\n    }\n\n    toBase62(id: bigint | HybridID): string {\n        if (id instanceof HybridID) {\n            id = (id as HybridID).toBigInt();\n        }\n\n        return encodeBase62(id);\n    }\n\n    fromBase62(encodedId: string | HybridID): bigint {\n        if (encodedId instanceof HybridID) {\n            encodedId = (encodedId as HybridID).toString();\n        }\n\n        return decodeBase62(encodedId);\n    }\n\n    /**\n     * Checks whether the given ID is a valid Hybrid ID.\n     *\n     * This method determines if the input ID is an instance of `HybridID`, \n     * a valid Base62 encoded string, or a bigint that conforms to the \n     * Hybrid ID structure. It performs various checks on the ID's \n     * components, including the timestamp, machine ID, random bits, \n     * and sequence number.\n     *\n     * @param {string | bigint | HybridID} id - The ID to validate. \n     * It can be a string (Base62 encoded), a bigint, or an instance of `HybridID`.\n     * \n     * @returns {id is HybridID} Returns true if the ID is a valid Hybrid ID, \n     * false otherwise.\n     */\n    isHybridID(id: string | bigint | HybridID): id is HybridID {\n        // If the input is a HybridID, we can return true without further checks\n        if (id instanceof HybridID) {\n            return true;\n        }\n\n        // If the input is a string, we need to check its format and decode it\n        if (typeof id === 'string') {\n            // Check if the string contains only valid Base62 characters\n            if (!/^[0-9a-zA-Z]+$/.test(id)) {\n                return false;  // Invalid characters for Base62\n            }\n\n            try {\n                // Decode and reassign id if it's valid Base62\n                id = this.fromBase62(id);\n            } catch {\n                return false;  // Return false if decoding throws an error\n            }\n        }\n\n        // At this point, `id` must be of type bigint\n        const totalBits = this.sequenceBits + this.randomBits + this.entropyBits + this.machineIdBits;\n\n        const timestamp = id >> BigInt(totalBits);\n        if (timestamp > BigInt(machineIdShift)) & BigInt((1  this.maxMachineId) return false;  // Check valid machine ID range\n\n        const randomBits = Number((id >> BigInt(this.sequenceBits)) & BigInt((1 = (1  this.maxSequence) return false;  // Valid sequence range\n\n        return true; // All checks passed, it's a valid Hybrid ID\n    }\n\n\n    /**\n     * Validates the given ID and checks if it is a valid Hybrid ID.\n     *\n     * This method uses the `isHybridID` method to validate the ID. \n     * If the ID is valid, it returns an object indicating the validity \n     * of the ID. If it is invalid, it provides a reason for the failure.\n     *\n     * @param {bigint | string} id - The ID to validate. \n     * It can be a bigint or a Base62 encoded string.\n     * \n     * @returns {{ valid: boolean; reason?: string }} An object containing:\n     * - `valid` (boolean): Indicates whether the ID is valid.\n     * - `reason` (string, optional): A reason for invalidation if applicable.\n     */\n    validateID(id: bigint | string): { valid: boolean; reason?: string } {\n        if (!this.isHybridID(id)) {\n            return { valid: false, reason: 'Invalid Hybrid ID' };\n        }\n        \n        return { valid: true };\n    }\n\n\n    /**\n     * Retrieves information about a given Hybrid ID.\n     *\n     * This method extracts various components from the Hybrid ID, including the \n     * timestamp, machine ID, random bits, and sequence number. If the provided \n     * ID is in Base62 format or an instance of `HybridID`, it converts it to a \n     * bigint for processing. If the ID is invalid, an error is thrown.\n     *\n     * @param {HybridID | bigint | string} id - The Hybrid ID to extract information from. \n     * It can be an instance of `HybridID`, a bigint, or a Base62 encoded string.\n     * \n     * @returns {HybridIDInfo} An object containing the extracted information:\n     * - `timestamp` (bigint): The timestamp portion of the Hybrid ID. \n     *   Returns -1 if the timestamp is masked.\n     * - `machineId` (number): The machine ID extracted from the Hybrid ID.\n     * - `randomBits` (number): The random bits extracted from the Hybrid ID.\n     * - `sequence` (number): The sequence number extracted from the Hybrid ID.\n     * - `masked` (boolean): Indicates whether the timestamp is masked.\n     * \n     * @throws {Error} If the provided ID is invalid.\n     */\n    info(id: HybridID | bigint | string): HybridIDInfo {\n        if (id instanceof HybridID) {\n            id = (id as HybridID).toBigInt();\n        }\n\n        // check if the id is valid\n        if (!this.isHybridID(id)) {\n            throw new Error('Invalid ID');\n        }\n\n        if (typeof id === 'string') {\n            id = this.fromBase62(id);  // Convert to bigint if the ID is in Base62 format.\n        }\n\n        const totalBits = this.sequenceBits + this.randomBits + this.entropyBits + this.machineIdBits;\n\n        // Extract timestamp (shift right to remove the other components)\n        let timestamp = id >> BigInt(totalBits);\n\n        // If timestamp is masked, we can't reverse obfuscation, but we can flag it\n        let masked = this.maskTimestamp;\n\n        // Extract the machine ID\n        const machineIdShift = this.sequenceBits + this.randomBits + this.entropyBits;\n        const machineId = Number((id >> BigInt(machineIdShift)) & BigInt((1 > BigInt(this.sequenceBits)) & BigInt((1 \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HybridIDGeneratorOptions.html":{"url":"interfaces/HybridIDGeneratorOptions.html","title":"interface - HybridIDGeneratorOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HybridIDGeneratorOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/HybridIDGenerator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            enableEventEmission\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            entropyBits\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            machineId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            machineIdBits\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            machineIdStrategy\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            maskTimestamp\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            randomBits\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            sequenceBits\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            useCrypto\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        enableEventEmission\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        enableEventEmission:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        entropyBits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entropyBits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        machineId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        machineId:     number | string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number | string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        machineIdBits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        machineIdBits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        machineIdStrategy\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        machineIdStrategy:     \"env\" | \"network\" | \"random\"\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"env\" | \"network\" | \"random\"\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maskTimestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maskTimestamp:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        randomBits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        randomBits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sequenceBits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sequenceBits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        useCrypto\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        useCrypto:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EventEmitter } from 'events';\nimport { generateRandomBits, obfuscateTimestamp, encodeBase62, decodeBase62, validateMachineId } from './utils';\nimport { MachineIDStrategy } from \"./MachineIDProvider\";\nimport { HybridID } from './HybridID';\n\n\nexport interface HybridIDGeneratorOptions {\n    sequenceBits?: number;\n    randomBits?: number;\n    entropyBits?: number;\n    useCrypto?: boolean;\n    maskTimestamp?: boolean;\n    enableEventEmission?: boolean;\n    machineIdBits?: number;\n    machineId?: number | string;\n    machineIdStrategy?: 'env' | 'network' | 'random'; // this is the machine id provider strategy\n}\n\nexport interface HybridIDInfo {\n    timestamp: bigint;\n    machineId: number;\n    randomBits: number;\n    sequence: number;\n    masked: boolean;\n}\n\nexport class HybridIDGenerator extends EventEmitter {\n    /**\n     * The machine ID used for generating unique Hybrid IDs.\n     * @private\n     * @type {number}\n     */\n    private machineId: number;\n\n    /**\n     * The current sequence number for ID generation.\n     * This resets to 0 when the timestamp changes.\n     * @private\n     * @type {number}\n     * @default 0\n     */\n    private sequence: number = 0;\n\n    /**\n     * The last generated timestamp in BigInt format.\n     * This is used to determine if a new timestamp is needed\n     * during ID generation.\n     * @private\n     * @type {bigint}\n     * @default -1n\n     */\n    private lastTimestamp: bigint = BigInt(-1);\n\n    /**\n     * The number of bits allocated for the sequence component of the Hybrid ID.\n     * @private\n     * @type {number}\n     */\n    private sequenceBits: number;\n\n    /**\n     * The number of bits allocated for random bits in the Hybrid ID.\n     * @private\n     * @type {number}\n     */\n    private randomBits: number;\n\n    /**\n     * The number of bits allocated for entropy in the Hybrid ID.\n     * @private\n     * @type {number}\n     */\n    private entropyBits: number;\n\n    /**\n     * Flag indicating whether to use cryptographic functions for random number generation.\n     * @private\n     * @type {boolean}\n     */\n    private useCrypto: boolean;\n\n    /**\n     * Flag indicating whether the timestamp should be masked during ID generation.\n     * @private\n     * @type {boolean}\n     */\n    private maskTimestamp: boolean;\n\n    /**\n     * Flag indicating whether event emission is enabled for ID generation events.\n     * @private\n     * @type {boolean}\n     */\n    private enableEventEmission: boolean;\n\n    /**\n     * The maximum value for the sequence component based on the number of bits allocated.\n     * @private\n     * @type {number}\n     */\n    private maxSequence: number;\n\n    /**\n     * The maximum value for the machine ID based on the number of bits allocated.\n     * @private\n     * @type {number}\n     */\n    private maxMachineId: number;\n\n    /**\n     * The number of bits allocated for the machine ID component of the Hybrid ID.\n     * @private\n     * @type {number}\n     */\n    private machineIdBits: number;\n\n    /**\n     * The strategy used for generating the machine ID.\n     * @private\n     * @type {MachineIDStrategy}\n     */\n    private machineIdStrategy: MachineIDStrategy;\n\n\n    /**\n     * Constructs a new Hybrid ID generator with the specified options.\n     *\n     * The constructor initializes various properties related to ID generation,\n     * including bit allocation for the sequence, random bits, and entropy,\n     * as well as the machine ID and options for masking and event emission.\n     *\n     * @param {HybridIDGeneratorOptions} [options={}] - The configuration options for the ID generator.\n     * @param {number} [options.sequenceBits=12] - The number of bits for the sequence component (default: 12).\n     * @param {number} [options.randomBits=10] - The number of bits for the random component (default: 10).\n     * @param {number} [options.entropyBits=5] - The number of bits for the entropy component (default: 5).\n     * @param {boolean} [options.useCrypto=false] - Whether to use cryptographic functions for random generation (default: false).\n     * @param {boolean} [options.maskTimestamp=false] - Whether to mask the timestamp (default: false).\n     * @param {boolean} [options.enableEventEmission=false] - Whether to enable event emission for ID generation (default: false).\n     * @param {number} [options.machineIdBits=12] - The number of bits for the machine ID component (default: 12).\n     * @param {MachineIDStrategy} [options.machineIdStrategy] - The strategy used for generating the machine ID.\n     * @param {number} [options.machineId] - The initial machine ID to use (must be validated).\n     */\n    constructor(options: HybridIDGeneratorOptions = {}) {\n        super();\n\n        this.sequenceBits = options.sequenceBits || 12;\n        this.randomBits = options.randomBits || 10;\n        this.entropyBits = options.entropyBits || 5;\n        this.useCrypto = options.useCrypto || false;\n        this.maskTimestamp = options.maskTimestamp || false;\n        this.enableEventEmission = options.enableEventEmission || false;\n        this.machineIdBits = options.machineIdBits || 12;\n        this.maxMachineId = (1 (batchSize);\n\n        let timestamp = this.getTimestamp();\n        if (this.maskTimestamp) {\n            timestamp = obfuscateTimestamp(timestamp);\n        }\n\n        // Cache the last generated timestamp\n        let lastTimestamp = this.lastTimestamp;\n\n        // Loop through the batchSize to generate IDs\n        for (let i = 0; i > BigInt(this.sequenceBits + this.randomBits + this.entropyBits + this.machineIdBits);\n        const currentTimestamp = BigInt(process.hrtime.bigint());\n        return (currentTimestamp - timestamp) > BigInt(expiryDurationInMillis * 1_000_000);\n    }\n\n    toBase62(id: bigint | HybridID): string {\n        if (id instanceof HybridID) {\n            id = (id as HybridID).toBigInt();\n        }\n\n        return encodeBase62(id);\n    }\n\n    fromBase62(encodedId: string | HybridID): bigint {\n        if (encodedId instanceof HybridID) {\n            encodedId = (encodedId as HybridID).toString();\n        }\n\n        return decodeBase62(encodedId);\n    }\n\n    /**\n     * Checks whether the given ID is a valid Hybrid ID.\n     *\n     * This method determines if the input ID is an instance of `HybridID`, \n     * a valid Base62 encoded string, or a bigint that conforms to the \n     * Hybrid ID structure. It performs various checks on the ID's \n     * components, including the timestamp, machine ID, random bits, \n     * and sequence number.\n     *\n     * @param {string | bigint | HybridID} id - The ID to validate. \n     * It can be a string (Base62 encoded), a bigint, or an instance of `HybridID`.\n     * \n     * @returns {id is HybridID} Returns true if the ID is a valid Hybrid ID, \n     * false otherwise.\n     */\n    isHybridID(id: string | bigint | HybridID): id is HybridID {\n        // If the input is a HybridID, we can return true without further checks\n        if (id instanceof HybridID) {\n            return true;\n        }\n\n        // If the input is a string, we need to check its format and decode it\n        if (typeof id === 'string') {\n            // Check if the string contains only valid Base62 characters\n            if (!/^[0-9a-zA-Z]+$/.test(id)) {\n                return false;  // Invalid characters for Base62\n            }\n\n            try {\n                // Decode and reassign id if it's valid Base62\n                id = this.fromBase62(id);\n            } catch {\n                return false;  // Return false if decoding throws an error\n            }\n        }\n\n        // At this point, `id` must be of type bigint\n        const totalBits = this.sequenceBits + this.randomBits + this.entropyBits + this.machineIdBits;\n\n        const timestamp = id >> BigInt(totalBits);\n        if (timestamp > BigInt(machineIdShift)) & BigInt((1  this.maxMachineId) return false;  // Check valid machine ID range\n\n        const randomBits = Number((id >> BigInt(this.sequenceBits)) & BigInt((1 = (1  this.maxSequence) return false;  // Valid sequence range\n\n        return true; // All checks passed, it's a valid Hybrid ID\n    }\n\n\n    /**\n     * Validates the given ID and checks if it is a valid Hybrid ID.\n     *\n     * This method uses the `isHybridID` method to validate the ID. \n     * If the ID is valid, it returns an object indicating the validity \n     * of the ID. If it is invalid, it provides a reason for the failure.\n     *\n     * @param {bigint | string} id - The ID to validate. \n     * It can be a bigint or a Base62 encoded string.\n     * \n     * @returns {{ valid: boolean; reason?: string }} An object containing:\n     * - `valid` (boolean): Indicates whether the ID is valid.\n     * - `reason` (string, optional): A reason for invalidation if applicable.\n     */\n    validateID(id: bigint | string): { valid: boolean; reason?: string } {\n        if (!this.isHybridID(id)) {\n            return { valid: false, reason: 'Invalid Hybrid ID' };\n        }\n        \n        return { valid: true };\n    }\n\n\n    /**\n     * Retrieves information about a given Hybrid ID.\n     *\n     * This method extracts various components from the Hybrid ID, including the \n     * timestamp, machine ID, random bits, and sequence number. If the provided \n     * ID is in Base62 format or an instance of `HybridID`, it converts it to a \n     * bigint for processing. If the ID is invalid, an error is thrown.\n     *\n     * @param {HybridID | bigint | string} id - The Hybrid ID to extract information from. \n     * It can be an instance of `HybridID`, a bigint, or a Base62 encoded string.\n     * \n     * @returns {HybridIDInfo} An object containing the extracted information:\n     * - `timestamp` (bigint): The timestamp portion of the Hybrid ID. \n     *   Returns -1 if the timestamp is masked.\n     * - `machineId` (number): The machine ID extracted from the Hybrid ID.\n     * - `randomBits` (number): The random bits extracted from the Hybrid ID.\n     * - `sequence` (number): The sequence number extracted from the Hybrid ID.\n     * - `masked` (boolean): Indicates whether the timestamp is masked.\n     * \n     * @throws {Error} If the provided ID is invalid.\n     */\n    info(id: HybridID | bigint | string): HybridIDInfo {\n        if (id instanceof HybridID) {\n            id = (id as HybridID).toBigInt();\n        }\n\n        // check if the id is valid\n        if (!this.isHybridID(id)) {\n            throw new Error('Invalid ID');\n        }\n\n        if (typeof id === 'string') {\n            id = this.fromBase62(id);  // Convert to bigint if the ID is in Base62 format.\n        }\n\n        const totalBits = this.sequenceBits + this.randomBits + this.entropyBits + this.machineIdBits;\n\n        // Extract timestamp (shift right to remove the other components)\n        let timestamp = id >> BigInt(totalBits);\n\n        // If timestamp is masked, we can't reverse obfuscation, but we can flag it\n        let masked = this.maskTimestamp;\n\n        // Extract the machine ID\n        const machineIdShift = this.sequenceBits + this.randomBits + this.entropyBits;\n        const machineId = Number((id >> BigInt(machineIdShift)) & BigInt((1 > BigInt(this.sequenceBits)) & BigInt((1 \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HybridIDInfo.html":{"url":"interfaces/HybridIDInfo.html","title":"interface - HybridIDInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HybridIDInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/HybridIDGenerator.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            machineId\n                                        \n                                \n                                \n                                        \n                                            masked\n                                        \n                                \n                                \n                                        \n                                            randomBits\n                                        \n                                \n                                \n                                        \n                                            sequence\n                                        \n                                \n                                \n                                        \n                                            timestamp\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        machineId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        machineId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        masked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        masked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        randomBits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        randomBits:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sequence\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sequence:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        timestamp\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        timestamp:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { EventEmitter } from 'events';\nimport { generateRandomBits, obfuscateTimestamp, encodeBase62, decodeBase62, validateMachineId } from './utils';\nimport { MachineIDStrategy } from \"./MachineIDProvider\";\nimport { HybridID } from './HybridID';\n\n\nexport interface HybridIDGeneratorOptions {\n    sequenceBits?: number;\n    randomBits?: number;\n    entropyBits?: number;\n    useCrypto?: boolean;\n    maskTimestamp?: boolean;\n    enableEventEmission?: boolean;\n    machineIdBits?: number;\n    machineId?: number | string;\n    machineIdStrategy?: 'env' | 'network' | 'random'; // this is the machine id provider strategy\n}\n\nexport interface HybridIDInfo {\n    timestamp: bigint;\n    machineId: number;\n    randomBits: number;\n    sequence: number;\n    masked: boolean;\n}\n\nexport class HybridIDGenerator extends EventEmitter {\n    /**\n     * The machine ID used for generating unique Hybrid IDs.\n     * @private\n     * @type {number}\n     */\n    private machineId: number;\n\n    /**\n     * The current sequence number for ID generation.\n     * This resets to 0 when the timestamp changes.\n     * @private\n     * @type {number}\n     * @default 0\n     */\n    private sequence: number = 0;\n\n    /**\n     * The last generated timestamp in BigInt format.\n     * This is used to determine if a new timestamp is needed\n     * during ID generation.\n     * @private\n     * @type {bigint}\n     * @default -1n\n     */\n    private lastTimestamp: bigint = BigInt(-1);\n\n    /**\n     * The number of bits allocated for the sequence component of the Hybrid ID.\n     * @private\n     * @type {number}\n     */\n    private sequenceBits: number;\n\n    /**\n     * The number of bits allocated for random bits in the Hybrid ID.\n     * @private\n     * @type {number}\n     */\n    private randomBits: number;\n\n    /**\n     * The number of bits allocated for entropy in the Hybrid ID.\n     * @private\n     * @type {number}\n     */\n    private entropyBits: number;\n\n    /**\n     * Flag indicating whether to use cryptographic functions for random number generation.\n     * @private\n     * @type {boolean}\n     */\n    private useCrypto: boolean;\n\n    /**\n     * Flag indicating whether the timestamp should be masked during ID generation.\n     * @private\n     * @type {boolean}\n     */\n    private maskTimestamp: boolean;\n\n    /**\n     * Flag indicating whether event emission is enabled for ID generation events.\n     * @private\n     * @type {boolean}\n     */\n    private enableEventEmission: boolean;\n\n    /**\n     * The maximum value for the sequence component based on the number of bits allocated.\n     * @private\n     * @type {number}\n     */\n    private maxSequence: number;\n\n    /**\n     * The maximum value for the machine ID based on the number of bits allocated.\n     * @private\n     * @type {number}\n     */\n    private maxMachineId: number;\n\n    /**\n     * The number of bits allocated for the machine ID component of the Hybrid ID.\n     * @private\n     * @type {number}\n     */\n    private machineIdBits: number;\n\n    /**\n     * The strategy used for generating the machine ID.\n     * @private\n     * @type {MachineIDStrategy}\n     */\n    private machineIdStrategy: MachineIDStrategy;\n\n\n    /**\n     * Constructs a new Hybrid ID generator with the specified options.\n     *\n     * The constructor initializes various properties related to ID generation,\n     * including bit allocation for the sequence, random bits, and entropy,\n     * as well as the machine ID and options for masking and event emission.\n     *\n     * @param {HybridIDGeneratorOptions} [options={}] - The configuration options for the ID generator.\n     * @param {number} [options.sequenceBits=12] - The number of bits for the sequence component (default: 12).\n     * @param {number} [options.randomBits=10] - The number of bits for the random component (default: 10).\n     * @param {number} [options.entropyBits=5] - The number of bits for the entropy component (default: 5).\n     * @param {boolean} [options.useCrypto=false] - Whether to use cryptographic functions for random generation (default: false).\n     * @param {boolean} [options.maskTimestamp=false] - Whether to mask the timestamp (default: false).\n     * @param {boolean} [options.enableEventEmission=false] - Whether to enable event emission for ID generation (default: false).\n     * @param {number} [options.machineIdBits=12] - The number of bits for the machine ID component (default: 12).\n     * @param {MachineIDStrategy} [options.machineIdStrategy] - The strategy used for generating the machine ID.\n     * @param {number} [options.machineId] - The initial machine ID to use (must be validated).\n     */\n    constructor(options: HybridIDGeneratorOptions = {}) {\n        super();\n\n        this.sequenceBits = options.sequenceBits || 12;\n        this.randomBits = options.randomBits || 10;\n        this.entropyBits = options.entropyBits || 5;\n        this.useCrypto = options.useCrypto || false;\n        this.maskTimestamp = options.maskTimestamp || false;\n        this.enableEventEmission = options.enableEventEmission || false;\n        this.machineIdBits = options.machineIdBits || 12;\n        this.maxMachineId = (1 (batchSize);\n\n        let timestamp = this.getTimestamp();\n        if (this.maskTimestamp) {\n            timestamp = obfuscateTimestamp(timestamp);\n        }\n\n        // Cache the last generated timestamp\n        let lastTimestamp = this.lastTimestamp;\n\n        // Loop through the batchSize to generate IDs\n        for (let i = 0; i > BigInt(this.sequenceBits + this.randomBits + this.entropyBits + this.machineIdBits);\n        const currentTimestamp = BigInt(process.hrtime.bigint());\n        return (currentTimestamp - timestamp) > BigInt(expiryDurationInMillis * 1_000_000);\n    }\n\n    toBase62(id: bigint | HybridID): string {\n        if (id instanceof HybridID) {\n            id = (id as HybridID).toBigInt();\n        }\n\n        return encodeBase62(id);\n    }\n\n    fromBase62(encodedId: string | HybridID): bigint {\n        if (encodedId instanceof HybridID) {\n            encodedId = (encodedId as HybridID).toString();\n        }\n\n        return decodeBase62(encodedId);\n    }\n\n    /**\n     * Checks whether the given ID is a valid Hybrid ID.\n     *\n     * This method determines if the input ID is an instance of `HybridID`, \n     * a valid Base62 encoded string, or a bigint that conforms to the \n     * Hybrid ID structure. It performs various checks on the ID's \n     * components, including the timestamp, machine ID, random bits, \n     * and sequence number.\n     *\n     * @param {string | bigint | HybridID} id - The ID to validate. \n     * It can be a string (Base62 encoded), a bigint, or an instance of `HybridID`.\n     * \n     * @returns {id is HybridID} Returns true if the ID is a valid Hybrid ID, \n     * false otherwise.\n     */\n    isHybridID(id: string | bigint | HybridID): id is HybridID {\n        // If the input is a HybridID, we can return true without further checks\n        if (id instanceof HybridID) {\n            return true;\n        }\n\n        // If the input is a string, we need to check its format and decode it\n        if (typeof id === 'string') {\n            // Check if the string contains only valid Base62 characters\n            if (!/^[0-9a-zA-Z]+$/.test(id)) {\n                return false;  // Invalid characters for Base62\n            }\n\n            try {\n                // Decode and reassign id if it's valid Base62\n                id = this.fromBase62(id);\n            } catch {\n                return false;  // Return false if decoding throws an error\n            }\n        }\n\n        // At this point, `id` must be of type bigint\n        const totalBits = this.sequenceBits + this.randomBits + this.entropyBits + this.machineIdBits;\n\n        const timestamp = id >> BigInt(totalBits);\n        if (timestamp > BigInt(machineIdShift)) & BigInt((1  this.maxMachineId) return false;  // Check valid machine ID range\n\n        const randomBits = Number((id >> BigInt(this.sequenceBits)) & BigInt((1 = (1  this.maxSequence) return false;  // Valid sequence range\n\n        return true; // All checks passed, it's a valid Hybrid ID\n    }\n\n\n    /**\n     * Validates the given ID and checks if it is a valid Hybrid ID.\n     *\n     * This method uses the `isHybridID` method to validate the ID. \n     * If the ID is valid, it returns an object indicating the validity \n     * of the ID. If it is invalid, it provides a reason for the failure.\n     *\n     * @param {bigint | string} id - The ID to validate. \n     * It can be a bigint or a Base62 encoded string.\n     * \n     * @returns {{ valid: boolean; reason?: string }} An object containing:\n     * - `valid` (boolean): Indicates whether the ID is valid.\n     * - `reason` (string, optional): A reason for invalidation if applicable.\n     */\n    validateID(id: bigint | string): { valid: boolean; reason?: string } {\n        if (!this.isHybridID(id)) {\n            return { valid: false, reason: 'Invalid Hybrid ID' };\n        }\n        \n        return { valid: true };\n    }\n\n\n    /**\n     * Retrieves information about a given Hybrid ID.\n     *\n     * This method extracts various components from the Hybrid ID, including the \n     * timestamp, machine ID, random bits, and sequence number. If the provided \n     * ID is in Base62 format or an instance of `HybridID`, it converts it to a \n     * bigint for processing. If the ID is invalid, an error is thrown.\n     *\n     * @param {HybridID | bigint | string} id - The Hybrid ID to extract information from. \n     * It can be an instance of `HybridID`, a bigint, or a Base62 encoded string.\n     * \n     * @returns {HybridIDInfo} An object containing the extracted information:\n     * - `timestamp` (bigint): The timestamp portion of the Hybrid ID. \n     *   Returns -1 if the timestamp is masked.\n     * - `machineId` (number): The machine ID extracted from the Hybrid ID.\n     * - `randomBits` (number): The random bits extracted from the Hybrid ID.\n     * - `sequence` (number): The sequence number extracted from the Hybrid ID.\n     * - `masked` (boolean): Indicates whether the timestamp is masked.\n     * \n     * @throws {Error} If the provided ID is invalid.\n     */\n    info(id: HybridID | bigint | string): HybridIDInfo {\n        if (id instanceof HybridID) {\n            id = (id as HybridID).toBigInt();\n        }\n\n        // check if the id is valid\n        if (!this.isHybridID(id)) {\n            throw new Error('Invalid ID');\n        }\n\n        if (typeof id === 'string') {\n            id = this.fromBase62(id);  // Convert to bigint if the ID is in Base62 format.\n        }\n\n        const totalBits = this.sequenceBits + this.randomBits + this.entropyBits + this.machineIdBits;\n\n        // Extract timestamp (shift right to remove the other components)\n        let timestamp = id >> BigInt(totalBits);\n\n        // If timestamp is masked, we can't reverse obfuscation, but we can flag it\n        let masked = this.maskTimestamp;\n\n        // Extract the machine ID\n        const machineIdShift = this.sequenceBits + this.randomBits + this.entropyBits;\n        const machineId = Number((id >> BigInt(machineIdShift)) & BigInt((1 > BigInt(this.sequenceBits)) & BigInt((1 \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MachineIDProvider.html":{"url":"interfaces/MachineIDProvider.html","title":"interface - MachineIDProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MachineIDProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MachineIDProvider.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for machine ID providers.\nAllows different strategies for generating or retrieving the machine ID.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getMachineId\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMachineId\n                        \n                    \n                \n            \n            \n                \ngetMachineId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/MachineIDProvider.ts:12\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import os from 'os';\nimport crypto from 'crypto';\n\nexport type MachineIDStrategy = 'env' | 'network' | 'random' | undefined;\n\n/**\n * Interface for machine ID providers.\n * Allows different strategies for generating or retrieving the machine ID.\n */\nexport interface MachineIDProvider {\n    getMachineId(): number;\n}\n\n/**\n * Environment-based machine ID provider.\n * Retrieves the machine ID from a specified environment variable and caches it.\n */\nexport class EnvMachineIDProvider implements MachineIDProvider {\n    private envVarName: string;\n    private cachedMachineId: number | null = null; // Cache variable for the machine ID\n\n    constructor(envVarName: string = 'MACHINE_ID') {\n        this.envVarName = envVarName;\n    }\n\n    getMachineId(): number {\n        // Return cached value if available\n        if (this.cachedMachineId !== null) {\n            return this.cachedMachineId;\n        }\n\n        const machineIdStr = process.env[this.envVarName];\n        if (!machineIdStr) {\n            throw new Error(`Environment variable ${this.envVarName} is not defined`);\n        }\n        const machineId = parseInt(machineIdStr, 10);\n        if (isNaN(machineId) || machineId \n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MachineIDProviderFactory.html":{"url":"classes/MachineIDProviderFactory.html","title":"class - MachineIDProviderFactory","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MachineIDProviderFactory\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MachineIDProvider.ts\n        \n\n\n            \n                Description\n            \n            \n                Factory for creating MachineIDProvider based on strategy.\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                createMachineIDProvider\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        createMachineIDProvider\n                        \n                    \n                \n            \n            \n                \n                        \n                    createMachineIDProvider(strategy: MachineIDStrategy, value?: string | number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/MachineIDProvider.ts:154\n                        \n                    \n\n\n            \n                \n                        Create a MachineIDProvider based on the strategy and a single var that is interpreted based on the strategy.\n\nIf the strategy is 'env', the var is treated as envVarName.\nIf the strategy is 'random', the var is treated as maxMachineId.\n'network' strategy doesn't require an additional var.\n\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                strategy\n                                            \n                                                            MachineIDStrategy\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                value\n                                            \n                                                        string | number\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         MachineIDProvider\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import os from 'os';\nimport crypto from 'crypto';\n\nexport type MachineIDStrategy = 'env' | 'network' | 'random' | undefined;\n\n/**\n * Interface for machine ID providers.\n * Allows different strategies for generating or retrieving the machine ID.\n */\nexport interface MachineIDProvider {\n    getMachineId(): number;\n}\n\n/**\n * Environment-based machine ID provider.\n * Retrieves the machine ID from a specified environment variable and caches it.\n */\nexport class EnvMachineIDProvider implements MachineIDProvider {\n    private envVarName: string;\n    private cachedMachineId: number | null = null; // Cache variable for the machine ID\n\n    constructor(envVarName: string = 'MACHINE_ID') {\n        this.envVarName = envVarName;\n    }\n\n    getMachineId(): number {\n        // Return cached value if available\n        if (this.cachedMachineId !== null) {\n            return this.cachedMachineId;\n        }\n\n        const machineIdStr = process.env[this.envVarName];\n        if (!machineIdStr) {\n            throw new Error(`Environment variable ${this.envVarName} is not defined`);\n        }\n        const machineId = parseInt(machineIdStr, 10);\n        if (isNaN(machineId) || machineId \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/NetworkMachineIDProvider.html":{"url":"classes/NetworkMachineIDProvider.html","title":"class - NetworkMachineIDProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  NetworkMachineIDProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MachineIDProvider.ts\n        \n\n\n            \n                Description\n            \n            \n                Network-based machine ID provider.\nGenerates a machine ID based on the MAC address of the network interface and caches it.\nThis provider can handle multiple MAC addresses and offers configuration options.\n\n            \n\n\n            \n                Implements\n            \n            \n                            MachineIDProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                cachedMachineId\n                            \n                            \n                                    Private\n                                    Optional\n                                interfaceName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getMachineId\n                            \n                            \n                                    Private\n                                getValidMac\n                            \n                            \n                                    Private\n                                hashMacToMachineId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(interfaceName?: string)\n                    \n                \n                        \n                            \n                                Defined in src/MachineIDProvider.ts:55\n                            \n                        \n\n                \n                    \n                            If not provided, the first valid MAC address found will be used.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        interfaceName\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                        \n                                                                Optional name of the network interface to use.\nIf not provided, the first valid MAC address found will be used.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        cachedMachineId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     number | null\n\n                    \n                \n                \n                    \n                        Default value : null\n                    \n                \n                    \n                        \n                                Defined in src/MachineIDProvider.ts:55\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Optional\n                        interfaceName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/MachineIDProvider.ts:54\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getMachineId\n                        \n                    \n                \n            \n            \n                \ngetMachineId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/MachineIDProvider.ts:65\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getValidMac\n                        \n                    \n                \n            \n            \n                \n                        \n                    getValidMac(iface: os.NetworkInterfaceInfo[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/MachineIDProvider.ts:99\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                iface\n                                            \n                                                        os.NetworkInterfaceInfo[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        hashMacToMachineId\n                        \n                    \n                \n            \n            \n                \n                        \n                    hashMacToMachineId(mac: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/MachineIDProvider.ts:108\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                mac\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import os from 'os';\nimport crypto from 'crypto';\n\nexport type MachineIDStrategy = 'env' | 'network' | 'random' | undefined;\n\n/**\n * Interface for machine ID providers.\n * Allows different strategies for generating or retrieving the machine ID.\n */\nexport interface MachineIDProvider {\n    getMachineId(): number;\n}\n\n/**\n * Environment-based machine ID provider.\n * Retrieves the machine ID from a specified environment variable and caches it.\n */\nexport class EnvMachineIDProvider implements MachineIDProvider {\n    private envVarName: string;\n    private cachedMachineId: number | null = null; // Cache variable for the machine ID\n\n    constructor(envVarName: string = 'MACHINE_ID') {\n        this.envVarName = envVarName;\n    }\n\n    getMachineId(): number {\n        // Return cached value if available\n        if (this.cachedMachineId !== null) {\n            return this.cachedMachineId;\n        }\n\n        const machineIdStr = process.env[this.envVarName];\n        if (!machineIdStr) {\n            throw new Error(`Environment variable ${this.envVarName} is not defined`);\n        }\n        const machineId = parseInt(machineIdStr, 10);\n        if (isNaN(machineId) || machineId \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RandomMachineIDProvider.html":{"url":"classes/RandomMachineIDProvider.html","title":"class - RandomMachineIDProvider","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RandomMachineIDProvider\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/MachineIDProvider.ts\n        \n\n\n            \n                Description\n            \n            \n                Random machine ID provider.\nGenerates a random machine ID within a specified range.\nThis implementation uses cryptographic random values to improve security and reduce predictability.\n\n            \n\n\n            \n                Implements\n            \n            \n                            MachineIDProvider\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                maxMachineId\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                generateRandomMachineId\n                            \n                            \n                                    Private\n                                getCryptographicRandomValue\n                            \n                            \n                                getMachineId\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(maxMachineId: number)\n                    \n                \n                        \n                            \n                                Defined in src/MachineIDProvider.ts:120\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        maxMachineId\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Maximum value for the machine ID. Defaults to 1023.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        maxMachineId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/MachineIDProvider.ts:120\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        generateRandomMachineId\n                        \n                    \n                \n            \n            \n                \n                        \n                    generateRandomMachineId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/MachineIDProvider.ts:133\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getCryptographicRandomValue\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCryptographicRandomValue(byteSize: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/MachineIDProvider.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                byteSize\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getMachineId\n                        \n                    \n                \n            \n            \n                \ngetMachineId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/MachineIDProvider.ts:129\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         number\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import os from 'os';\nimport crypto from 'crypto';\n\nexport type MachineIDStrategy = 'env' | 'network' | 'random' | undefined;\n\n/**\n * Interface for machine ID providers.\n * Allows different strategies for generating or retrieving the machine ID.\n */\nexport interface MachineIDProvider {\n    getMachineId(): number;\n}\n\n/**\n * Environment-based machine ID provider.\n * Retrieves the machine ID from a specified environment variable and caches it.\n */\nexport class EnvMachineIDProvider implements MachineIDProvider {\n    private envVarName: string;\n    private cachedMachineId: number | null = null; // Cache variable for the machine ID\n\n    constructor(envVarName: string = 'MACHINE_ID') {\n        this.envVarName = envVarName;\n    }\n\n    getMachineId(): number {\n        // Return cached value if available\n        if (this.cachedMachineId !== null) {\n            return this.cachedMachineId;\n        }\n\n        const machineIdStr = process.env[this.envVarName];\n        if (!machineIdStr) {\n            throw new Error(`Environment variable ${this.envVarName} is not defined`);\n        }\n        const machineId = parseInt(machineIdStr, 10);\n        if (isNaN(machineId) || machineId \n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"changelog.html":{"url":"changelog.html","title":"getting-started - changelog","body":"\n                   \n\nChangelog\nAll notable changes to this project will be documented in this file. See standard-version for commit guidelines.\n3.0.1 (2024-10-11)\n3.0.0 (2024-10-11)\n2.4.0 (2024-10-11)\nFeatures\n\n🎸 add info method to get the id info ,fix isValidateId (2d528af)\n🎸 Update the generate id functionality to extend it (12e122f)\n\nBug Fixes\n\ntest (5453f04)\ntimestamp (f497a81)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/HybridID.ts\n            \n            class\n            HybridID\n            \n                95 %\n                (21/22)\n            \n        \n        \n            \n                \n                src/HybridIDGenerator.ts\n            \n            class\n            HybridIDGenerator\n            \n                83 %\n                (20/24)\n            \n        \n        \n            \n                \n                src/HybridIDGenerator.ts\n            \n            interface\n            HybridIDGeneratorOptions\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/HybridIDGenerator.ts\n            \n            interface\n            HybridIDInfo\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/MachineIDProvider.ts\n            \n            class\n            EnvMachineIDProvider\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/MachineIDProvider.ts\n            \n            class\n            MachineIDProviderFactory\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/MachineIDProvider.ts\n            \n            class\n            NetworkMachineIDProvider\n            \n                28 %\n                (2/7)\n            \n        \n        \n            \n                \n                src/MachineIDProvider.ts\n            \n            class\n            RandomMachineIDProvider\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/MachineIDProvider.ts\n            \n            interface\n            MachineIDProvider\n            \n                50 %\n                (1/2)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            Base32Chars\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            Base62Chars\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/constants.ts\n            \n            variable\n            Base64Chars\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            decodeBase32\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            decodeBase62\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            decodeBase64\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            encodeBase32\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            encodeBase62\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            encodeBase64\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            generateRandomBits\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            obfuscateTimestamp\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            toBigInt\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/utils.ts\n            \n            function\n            validateMachineId\n            \n                100 %\n                (1/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            decodeBase32   (src/.../utils.ts)\n                        \n                        \n                            decodeBase62   (src/.../utils.ts)\n                        \n                        \n                            decodeBase64   (src/.../utils.ts)\n                        \n                        \n                            encodeBase32   (src/.../utils.ts)\n                        \n                        \n                            encodeBase62   (src/.../utils.ts)\n                        \n                        \n                            encodeBase64   (src/.../utils.ts)\n                        \n                        \n                            generateRandomBits   (src/.../utils.ts)\n                        \n                        \n                            obfuscateTimestamp   (src/.../utils.ts)\n                        \n                        \n                            toBigInt   (src/.../utils.ts)\n                        \n                        \n                            validateMachineId   (src/.../utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        decodeBase32\n                        \n                    \n                \n            \n            \n                \ndecodeBase32(encoded: string)\n                \n            \n\n\n\n\n            \n                \n                        Decodes a Base32 encoded string to a bigint.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                encoded\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Base32 encoded string to decode.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decodeBase62\n                        \n                    \n                \n            \n            \n                \ndecodeBase62(encoded: string)\n                \n            \n\n\n\n\n            \n                \n                        Decodes a Base62 encoded string to a bigint.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                encoded\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Base62 encoded string to decode.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        decodeBase64\n                        \n                    \n                \n            \n            \n                \ndecodeBase64(encoded: string)\n                \n            \n\n\n\n\n            \n                \n                        Decodes a Base64 encoded string to a bigint.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                encoded\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Base64 encoded string to decode.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encodeBase32\n                        \n                    \n                \n            \n            \n                \nencodeBase32(input)\n                \n            \n\n\n\n\n            \n                \n                        Encodes a bigint or string input to a Base32 string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                input\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe bigint or string to encode.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The Base32 encoded string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encodeBase62\n                        \n                    \n                \n            \n            \n                \nencodeBase62(input)\n                \n            \n\n\n\n\n            \n                \n                        Encodes a bigint or string input to a Base62 string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                input\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe bigint or string to encode.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The Base62 encoded string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        encodeBase64\n                        \n                    \n                \n            \n            \n                \nencodeBase64(input)\n                \n            \n\n\n\n\n            \n                \n                        Encodes a bigint or string input to a Base64 string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                input\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe bigint or string to encode.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The Base64 encoded string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        generateRandomBits\n                        \n                    \n                \n            \n            \n                \ngenerateRandomBits(randomBits: number, useCrypto: boolean)\n                \n            \n\n\n\n\n            \n                \n                        Generates random bits with an option to use either cryptographic or non-cryptographic random number generation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                randomBits\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of random bits to generate.\n\n\n                                            \n                                        \n                                        \n                                                useCrypto\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nWhether to use cryptographic random number generation (true) or non-cryptographic (false).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                A random number within the range defined by the specified number of bits.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        obfuscateTimestamp\n                        \n                    \n                \n            \n            \n                \nobfuscateTimestamp(timestamp)\n                \n            \n\n\n\n\n            \n                \n                        Obfuscates a timestamp using SHA-256 hashing.\nThe first 16 characters of the hash are used to create a bigint representation.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                timestamp\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe timestamp in bigint format to be obfuscated.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        toBigInt\n                        \n                    \n                \n            \n            \n                \ntoBigInt(input)\n                \n            \n\n\n\n\n            \n                \n                        Converts the input to a bigint.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                input\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe input to convert, which can be either a bigint or a string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        validateMachineId\n                        \n                    \n                \n            \n            \n                \nvalidateMachineId(machineIdStrategy, machineId, maxMachineId: number)\n                \n            \n\n\n\n\n            \n                \n                        Validates and returns a machine ID based on the specified strategy.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                machineIdStrategy\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe strategy for generating or retrieving the machine ID ('env', 'random', or undefined).\n\n\n                                            \n                                        \n                                        \n                                                machineId\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe machine ID to validate, based on the strategy.\n\n\n                                            \n                                        \n                                        \n                                                maxMachineId\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe maximum valid value for the machine ID.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         number\n\n                        \n                            \n                                A validated machine ID.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nHybrid ID Generator\n \nThe Hybrid ID Generator is a powerful TypeScript-based library designed to produce unique identifiers by seamlessly combining timestamps, machine identifiers, sequence numbers, and random bits. This innovative approach ensures that each generated ID is unique and highly resilient against collisions, making it ideal for distributed systems.\nThis package is optimized for versatility and can be effortlessly utilized in both client-side and server-side environments, offering flexibility for a wide range of applications—from web development to microservices architecture.\nWhether you are building a high-performance application that requires unique identifiers for database entries or need to track events in real-time, the Hybrid ID Generator provides a reliable solution that meets your needs.\nFeatures\n\nUnique ID Generation: Generates unique IDs based on a combination of timestamp, machine ID, random bits, and sequence number, ensuring uniqueness across different instances.\nBase62 Encoding/Decoding: Supports encoding and decoding of IDs to and from Base62 format, facilitating easier storage and transmission.\nEvent Emission: Emits events upon ID generation, allowing seamless integration with other application components and real-time tracking of ID creation.\nID Expiration Check: Provides functionality to check if an ID has expired based on a specified duration, ensuring IDs are valid only for a predetermined time.\nTimestamp Obfuscation: Offers timestamp obfuscation to enhance security and prevent reverse engineering of ID generation.\nID Validation: Includes methods to validate the format and structure of generated IDs.\nConfiguration Options: Allows customization of parameters such as machine identifiers, sequence numbers, and random bit lengths for flexible use cases.\nCross-Platform Support: Designed to work seamlessly in both client-side and server-side environments, making it versatile for various applications.\n\nInstallation\nYou can install the package via npm:\nExample :npm install hybrid-id-generatorUsage\nImporting the Package\nYou can use the package in both CommonJS and ES Module formats:\nExample :import { HybridIDGenerator } from 'hybrid-id-generator';\n\nconst idGenerator = new HybridIDGenerator({\n    machineId: 1, // Unique identifier for the machine\n    randomBits: 10, // Number of random bits\n});\n\n// Generate a single ID\nconst uniqueId = idGenerator.nextId();\nconsole.log(`Generated ID: ${uniqueId}`);\n\n// Check if an ID is valid\nconst isValid = idGenerator.isHybridID(uniqueId);\nconsole.log(`Is valid ID: ${isValid}`);\n\n// Decode an ID\nconst decodedId = idGenerator.decode(uniqueId);\nconsole.log(`Decoded ID:`, decodedId);Example\nHere’s a quick example of how to use the HybridIDGenerator:\nServer-Side Example\nExample :import { HybridIDGenerator } from 'hybrid-id-generator';\n\n// Initialize the ID generator with a machine identifier and configuration options.\nconst idGenerator = new HybridIDGenerator({\n  sequenceBits: 12,\n  randomBits: 10,\n});\n\n// Generate a new unique ID.\nconst id: number = idGenerator.nextId();\nconsole.log(`Generated ID: ${id}`);Client-Side Example\nExample :import HybridIDGenerator from 'hybrid-id-generator'; // Adjust the path as necessary\n\n// Initialize the ID generator with configuration options.\nconst idGenerator = new HybridIDGenerator({\n  sequenceBits: 12,\n  randomBits: 10,\n  useCrypto: true, // Assuming this option is supported in your implementation\n});\n\n// Generate a new unique ID.\nconst newId: number = idGenerator.nextId();\nconsole.log(`Generated ID: ${newId.toString()}`);API\nHybridIDGenerator API Documentation\nInterfaces\nHybridIDGeneratorOptions\nOptions for configuring the HybridIDGenerator.\n\n\n\nProperty\nType\nDefault\nDescription\n\n\n\n\nsequenceBits\nnumber\n12\nThe number of bits for the sequence component.\n\n\nrandomBits\nnumber\n10\nThe number of bits for the random component.\n\n\nentropyBits\nnumber\n5\nThe number of bits for the entropy component.\n\n\nuseCrypto\nboolean\nfalse\nWhether to use cryptographic functions for random generation.\n\n\nmaskTimestamp\nboolean\nfalse\nWhether to mask the timestamp during ID generation.\n\n\nenableEventEmission\nboolean\nfalse\nWhether to enable event emission for ID generation.\n\n\nmachineIdBits\nnumber\n12\nThe number of bits for the machine ID component.\n\n\nmachineIdStrategy\n`'env'\n'network'\n'random'`\n\n\nmachineId\n`number\nstring`\n-\n\n\n\nHybridIDInfo\nInformation about the generated Hybrid ID.\n\n\n\nProperty\nType\nDescription\n\n\n\n\ntimestamp\nbigint\nThe timestamp portion of the Hybrid ID.\n\n\nmachineId\nnumber\nThe machine ID portion of the Hybrid ID.\n\n\nrandomBits\nnumber\nThe random bits portion of the Hybrid ID.\n\n\nsequence\nnumber\nThe sequence number of the Hybrid ID.\n\n\nmasked\nboolean\nIndicates whether the timestamp is masked.\n\n\n\nClass: HybridIDGenerator\nConstructor\nExample :constructor(options: HybridIDGeneratorOptions = {})Initializes a new instance of HybridIDGenerator with the specified options.\nProperties\n\noptions: HybridIDGeneratorOptions & { sequence: number; lastTimestamp: bigint; maxSequence: number; maxMachineId: number; }\nGets the current options and state of the Hybrid ID generator.\n\n\n\nEvents\nidGenerated\n\nEmitted whenever a new ID is generated. You can listen for this event as follows:\n\nExample :idGenerator.on('idGenerated', (id) => {\n    console.log(`New ID generated: ${id}`);\n});\nidGenerator.nextId();Contributing\nContributions are welcome! Please feel free to submit a pull request or open an issue for any bugs or feature requests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 3.0.1\n        \n            Description : A robust and efficient hybrid ID generator that combines timestamps, machine IDs, random bits, and sequence numbers to create unique identifiers. Supports collision prevention, ID expiry tracking, and Base62 encoding.\n        \n            Keywords : id, identifier, unique, hybrid, generator\n        \n            Homepage : https://github.com/miladezzat/hybrid-id-generator\n        \n            Bugs : https://github.com/miladezzat/hybrid-id-generator/issues\n        \n            License : MIT\n        \n            Repository : https://github.com/miladezzat/hybrid-id-generator\n        \n            Author : Milad Ezzat\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            MachineIDStrategy   (src/.../MachineIDProvider.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/MachineIDProvider.ts\n    \n    \n        \n            \n                \n                    \n                    MachineIDStrategy\n                \n            \n            \n                \n                        \"env\" | \"network\" | \"random\" | undefined\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Base32Chars   (src/.../constants.ts)\n                        \n                        \n                            Base62Chars   (src/.../constants.ts)\n                        \n                        \n                            Base64Chars   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Base32Chars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'\n                    \n                \n\n            \n                \n                    Characters used for Base32 encoding (A-Z, 2-7).\nRFC 4648 standard.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Base62Chars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n                    \n                \n\n            \n                \n                    Characters used for Base62 encoding (0-9, a-z, A-Z).\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Base64Chars\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\n                    \n                \n\n            \n                \n                    Characters used for Base64 encoding (A-Z, a-z, 0-9, +, /).\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
